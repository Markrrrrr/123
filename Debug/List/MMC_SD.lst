###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             28/Oct/2019  21:00:25 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  F:\单片机例程\1.程序\IAP\IAP---已测试【2019.7.15】\STM8L #
#                    152R8T6\STM8L152R8T6_IAP_APP\SDCARD\MMC_SD.C             #
#    Command line =  F:\单片机例程\1.程序\IAP\IAP---已测试【2019.7.15】\STM8L #
#                    152R8T6\STM8L152R8T6_IAP_APP\SDCARD\MMC_SD.C -e -Ol      #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_cross_call --debug --code_model medium    #
#                    --data_model medium -o F:\单片机例程\1.程序\IAP\IAP---已 #
#                    测试【2019.7.15】\STM8L152R8T6\STM8L152R8T6_IAP_APP\Debu #
#                    g\Obj\ --dlib_config "D:\Program Files (x86)\IAR         #
#                    Systems\Embedded Workbench 6.0\stm8\LIB\dlstm8mmn.h"     #
#                    -lcN F:\单片机例程\1.程序\IAP\IAP---已测试【2019.7.15】\ #
#                    STM8L152R8T6\STM8L152R8T6_IAP_APP\Debug\List\ -I         #
#                    F:\单片机例程\1.程序\IAP\IAP---已测试【2019.7.15】\STM8L #
#                    152R8T6\STM8L152R8T6_IAP_APP\ -I                         #
#                    F:\单片机例程\1.程序\IAP\IAP---已测试【2019.7.15】\STM8L #
#                    152R8T6\STM8L152R8T6_IAP_APP\SDCARD\ -I                  #
#                    F:\单片机例程\1.程序\IAP\IAP---已测试【2019.7.15】\STM8L #
#                    152R8T6\STM8L152R8T6_IAP_APP\src\ --vregs 16             #
#    List file    =  F:\单片机例程\1.程序\IAP\IAP---已测试【2019.7.15】\STM8L #
#                    152R8T6\STM8L152R8T6_IAP_APP\Debug\List\MMC_SD.lst       #
#    Object file  =  F:\单片机例程\1.程序\IAP\IAP---已测试【2019.7.15】\STM8L #
#                    152R8T6\STM8L152R8T6_IAP_APP\Debug\Obj\MMC_SD.o          #
#                                                                             #
#                                                                             #
###############################################################################

F:\单片机例程\1.程序\IAP\IAP---已测试【2019.7.15】\STM8L152R8T6\STM8L152R8T6_IAP_APP\SDCARD\MMC_SD.C
      1          #include "mmc_sd.h"
      2          //#include "oled.h"
      3          
      4          
      5          //////////////////////////////////////////////////////////////////////////////////	 
      6          					   					   
      7          unsigned char  SD_Type=0;//SD卡的类型 
      8          ////////////////////////////////////移植修改区///////////////////////////////////
      9          //移植时候的接口
     10          //data:要写入的数据
     11          //返回值:读到的数据
     12          unsigned char SD_SPI_ReadWriteByte(unsigned char data)
     13          {
     14            return SPI1_ReadWriteByte(data);
     15          }	  
     16          
     17          //SPI硬件层初始化
     18          void SD_SPI_Init(void)
     19          {
     20            //GPIO_Init(GPIOB, GPIO_Pin_4, GPIO_Mode_Out_PP_Low_Fast);//设置SD_CS对应的DSP引脚为输出
     21            PB_DDR_bit.DDR4=1;PB_CR1_bit.C14=1;PB_CR2_bit.C24=1;//RST
     22            SPI1_Init();
     23            SD_CS_H;
     24          }
     25          ///////////////////////////////////////////////////////////////////////////////////
     26          //取消选择,释放SPI总线
     27          void SD_DisSelect(void)
     28          {
     29            SD_CS_H;
     30            SD_SPI_ReadWriteByte(0xff);//提供额外的8个时钟
     31          }
     32          //选择sd卡,并且等待卡准备OK
     33          //返回值:0,成功;1,失败;
     34          unsigned char SD_Select(void)
     35          {
     36            SD_CS_L;
     37            if(SD_WaitReady()==0)return 0;//等待成功
     38            SD_DisSelect();
     39            return 1;//等待失败
     40          }
     41          //等待卡准备好
     42          //返回值:0,准备好了;其他,错误代码
     43          unsigned char SD_WaitReady(void)
     44          {
     45            u32 t=0;
     46            do
     47            {
     48              if(SD_SPI_ReadWriteByte(0XFF)==0XFF)return 0;//OK
     49              t++;
     50            }while(t<0XFFFFFF);//等待 
     51            return 1;
     52          }
     53          //等待SD卡回应
     54          //Response:要得到的回应值
     55          //返回值:0,成功得到了该回应值
     56          //    其他,得到回应值失败
     57          unsigned char SD_GetResponse(unsigned char Response)
     58          {
     59            u16 Count=0xFFFF;//等待次数	   						  
     60            while ((SD_SPI_ReadWriteByte(0XFF)!=Response)&&Count)Count--;//等待得到准确的回应  	  
     61            if (Count==0)return MSD_RESPONSE_FAILURE;//得到回应失败   
     62            else return MSD_RESPONSE_NO_ERROR;//正确回应
     63          }
     64          //从sd卡读取一个数据包的内容
     65          //buf:数据缓存区
     66          //len:要读取的数据长度.
     67          //返回值:0,成功;其他,失败;	
     68          unsigned char SD_RecvData(unsigned char*buf,u16 len)
     69          {		  	  
     70            if(SD_GetResponse(0xFE))return 1;//等待SD卡发回数据起始令牌0xFE
     71            while(len--)//开始接收数据
     72            {
     73              *buf=SPI1_ReadWriteByte(0xFF);
     74              buf++;
     75            }
     76            //下面是2个伪CRC（dummy CRC）
     77            SD_SPI_ReadWriteByte(0xFF);
     78            SD_SPI_ReadWriteByte(0xFF);
     79            return 0;//读取成功
     80          }
     81          //向sd卡写入一个数据包的内容 512字节
     82          //buf:数据缓存区
     83          //cmd:指令
     84          //返回值:0,成功;其他,失败;	
     85          unsigned char SD_SendBlock(unsigned char*buf,unsigned char cmd)
     86          {	
     87            u16 t;
     88            if(SD_WaitReady())return 1;//等待准备失效
     89            SD_SPI_ReadWriteByte(cmd);
     90            if(cmd!=0XFD)//不是结束指令
     91            {
     92              for(t=0;t<512;t++)SPI1_ReadWriteByte(buf[t]);//提高速度,减少函数传参时间
     93              SD_SPI_ReadWriteByte(0xFF);//忽略crc
     94              SD_SPI_ReadWriteByte(0xFF);
     95              t=SD_SPI_ReadWriteByte(0xFF);//接收响应
     96              if((t&0x1F)!=0x05)return 2;//响应错误
     97            }
     98            return 0;//写入成功
     99          }
    100          
    101          //向SD卡发送一个命令
    102          //输入: unsigned char cmd   命令 
    103          //      u32 arg  命令参数
    104          //      unsigned char crc   crc校验值	   
    105          //返回值:SD卡返回的响应															  
    106          unsigned char SD_SendCmd(unsigned char cmd, u32 arg, unsigned char crc)
    107          {
    108            unsigned char r1;	
    109            unsigned char Retry=0; 
    110            SD_DisSelect();//取消上次片选
    111            if(SD_Select())return 0XFF;//片选失效 
    112            //发送
    113            SD_SPI_ReadWriteByte(cmd | 0x40);//分别写入命令
    114            SD_SPI_ReadWriteByte(arg >> 24);
    115            SD_SPI_ReadWriteByte(arg >> 16);
    116            SD_SPI_ReadWriteByte(arg >> 8);
    117            SD_SPI_ReadWriteByte(arg);	  
    118            SD_SPI_ReadWriteByte(crc); 
    119            if(cmd==CMD12)SD_SPI_ReadWriteByte(0xff);//Skip a stuff byte when stop reading
    120            //等待响应，或超时退出
    121            Retry=0X1F;
    122            do
    123            {
    124              r1=SD_SPI_ReadWriteByte(0xFF);
    125            }
    126            while((r1&0X80) && Retry--);
    127            //返回状态值
    128            return r1;
    129          }		    																			  
    130          //获取SD卡的CID信息，包括制造商信息
    131          //输入: unsigned char *cid_data(存放CID的内存，至少16Byte）	  
    132          //返回值:0：NO_ERR
    133          //		 1：错误														   
    134          unsigned char SD_GetCID(unsigned char *cid_data)
    135          {
    136            unsigned char r1;	   
    137            //发CMD10命令，读CID
    138            r1=SD_SendCmd(CMD10,0,0x01);
    139            if(r1==0x00)
    140            {
    141              r1=SD_RecvData(cid_data,16);//接收16个字节的数据
    142            }
    143            SD_DisSelect();//取消片选
    144            if(r1)return 1;
    145            else return 0;
    146          }																			  
    147          //获取SD卡的CSD信息，包括容量和速度信息
    148          //输入:unsigned char *cid_data(存放CID的内存，至少16Byte）	    
    149          //返回值:0：NO_ERR
    150          //		 1：错误														   
    151          unsigned char SD_GetCSD(unsigned char *csd_data)
    152          {
    153            unsigned char r1;	 
    154            r1=SD_SendCmd(CMD9,0,0x01);//发CMD9命令，读CSD
    155            if(r1==0)
    156            {
    157              r1=SD_RecvData(csd_data, 16);//接收16个字节的数据 
    158            }
    159            SD_DisSelect();//取消片选
    160            if(r1)return 1;
    161            else return 0;
    162          } 
    163          //获取SD卡的总扇区数（扇区数）   
    164          //返回值:0： 取容量出错 
    165          //       其他:SD卡的容量(扇区数/512字节)
    166          //每扇区的字节数必为512，因为如果不是512，则初始化不能通过.														  
    167          u32 SD_GetSectorCount(void)
    168          {
    169            unsigned char csd[16];
    170            u32 Capacity;  
    171            unsigned char n;
    172            u16 csize;  					    
    173            //取CSD信息，如果期间出错，返回0
    174            if(SD_GetCSD(csd)!=0) return 0;	    
    175            //如果为SDHC卡，按照下面方式计算
    176            if((csd[0]&0xC0)==0x40)	 //V2.00的卡
    177            {
    178              csize = csd[9] + ((u16)csd[8] << 8) + 1;
    179              Capacity = (u32)csize << 10;//得到扇区数
    180            }
    181            else//V1.XX的卡
    182            {	
    183              n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    184              csize = (csd[8] >> 6) + ((u16)csd[7] << 2) + ((u16)(csd[6] & 3) << 10) + 1;
    185              Capacity= (u32)csize << (n - 9);//得到扇区数   
    186            }
    187            return Capacity;
    188          }
    189          //初始化SD卡
    190          unsigned char SD_Initialize(void)
    191          {
    192            unsigned char r1;      // 存放SD卡的返回值
    193            u16 retry;  // 用来进行超时计数
    194            unsigned char buf[4];
    195            u16 i;
    196            SD_SPI_Init();		//初始化IO
    197            for(i=0;i<74;i++)SD_SPI_ReadWriteByte(0XFF);//发送最少74个脉冲
    198            retry=20;
    199            do
    200            {
    201              r1=SD_SendCmd(CMD0,0,0x95);//进入IDLE状态
    202            }while((r1!=0X01) && retry--);
    203            SD_Type=0;//默认无卡
    204            if(r1==0X01)
    205            {
    206              if(SD_SendCmd(CMD8,0x1AA,0x87)==1)//SD V2.0
    207              {
    208                for(i=0;i<4;i++)buf[i]=SD_SPI_ReadWriteByte(0XFF);	//Get trailing return value of R7 resp
    209                if(buf[2]==0X01&&buf[3]==0XAA)//卡是否支持2.7~3.6V
    210                {
    211                  retry=0XFFFE;
    212                  do
    213                  {
    214                    SD_SendCmd(CMD55,0,0X01);	//发送CMD55
    215                    r1=SD_SendCmd(CMD41,0x40000000,0X01);//发送CMD41
    216                  }while(r1&&retry--);
    217                  if(retry&&SD_SendCmd(CMD58,0,0X01)==0)//鉴别SD2.0卡版本开始
    218                  {
    219                    for(i=0;i<4;i++)buf[i]=SD_SPI_ReadWriteByte(0XFF);//得到OCR值
    220                    if(buf[0]&0x40)SD_Type=SD_TYPE_V2HC;    //检查CCS
    221                    else SD_Type=SD_TYPE_V2;
    222                  }
    223                }
    224              }
    225              else//SD V1.x/ MMC	V3
    226              {
    227                SD_SendCmd(CMD55,0,0X01);		//发送CMD55
    228                r1=SD_SendCmd(CMD41,0,0X01);	//发送CMD41
    229                if(r1<=1)
    230                {
    231                  SD_Type=SD_TYPE_V1;
    232                  retry=0XFFFE;
    233                  do //等待退出IDLE模式
    234                  {
    235                    SD_SendCmd(CMD55,0,0X01);	//发送CMD55
    236                    r1=SD_SendCmd(CMD41,0,0X01);//发送CMD41
    237                  }while(r1&&retry--);
    238                }
    239                else
    240                {
    241                  SD_Type=SD_TYPE_MMC;//MMC V3
    242                  retry=0XFFFE;
    243                  do //等待退出IDLE模式
    244          	{
    245                    r1=SD_SendCmd(CMD1,0,0X01);//发送CMD1
    246                  }while(r1&&retry--);
    247                }
    248                if(retry==0||SD_SendCmd(CMD16,512,0X01)!=0)SD_Type=SD_TYPE_ERR;//错误的卡
    249              }
    250            }
    251            SD_DisSelect();//取消片选
    252            if(SD_Type)return 0;
    253            else if(r1)return r1;
    254            return 0xaa;//其他错误
    255          }
    256          //读SD卡
    257          //buf:数据缓存区
    258          //sector:扇区
    259          //cnt:扇区数
    260          //返回值:0,ok;其他,失败.
    261          unsigned char SD_ReadDisk(unsigned char*buf,u32 sector,unsigned char cnt)
    262          {
    263            unsigned char r1;
    264            if(SD_Type!=SD_TYPE_V2HC)sector <<= 9;//转换为字节地址
    265            if(cnt==1)
    266            {
    267              r1=SD_SendCmd(CMD17,sector,0X01);//读命令
    268              if(r1==0)//指令发送成功
    269              {
    270                r1=SD_RecvData(buf,512);//接收512个字节	   
    271              }
    272            }else
    273            {
    274              r1=SD_SendCmd(CMD18,sector,0X01);//连续读命令
    275              do
    276              {
    277                r1=SD_RecvData(buf,512);//接收512个字节
    278                buf+=512;
    279              }while(--cnt && r1==0);
    280              SD_SendCmd(CMD12,0,0X01);	//发送停止命令
    281            }
    282            SD_DisSelect();//取消片选
    283            return r1;//
    284          }
    285          //写SD卡
    286          //buf:数据缓存区
    287          //sector:起始扇区
    288          //cnt:扇区数
    289          //返回值:0,ok;其他,失败.
    290          unsigned char SD_WriteDisk(unsigned char*buf,u32 sector,unsigned char cnt)
    291          {
    292            unsigned char r1;
    293            if(SD_Type!=SD_TYPE_V2HC)sector *= 512;//转换为字节地址
    294            if(cnt==1)
    295            {
    296              r1=SD_SendCmd(CMD24,sector,0X01);//读命令
    297              if(r1==0)//指令发送成功
    298              {
    299                r1=SD_SendBlock(buf,0xFE);//写512个字节
    300              }
    301            }else
    302            {
    303              if(SD_Type!=SD_TYPE_MMC)
    304              {
    305                SD_SendCmd(CMD55,0,0X01);
    306                SD_SendCmd(CMD23,cnt,0X01);//发送指令
    307              }
    308              r1=SD_SendCmd(CMD25,sector,0X01);//连续读命令
    309              if(r1==0)
    310              {
    311                do
    312                {
    313                  r1=SD_SendBlock(buf,0xFC);//接收512个字节	 
    314          	buf+=512;  
    315          	}while(--cnt && r1==0);
    316          	r1=SD_SendBlock(0,0xFD);//接收512个字节 
    317              }
    318            }
    319            SD_DisSelect();//取消片选
    320            return r1;//
    321          }   

   Section sizes:

     Function/Label       Bytes
     --------------       -----
     _A_PB_ODR               1
     _A_PB_DDR               1
     _A_PB_CR1               1
     _A_PB_CR2               1
     SD_Type                 1
     SD_SPI_ReadWriteByte    4
     SD_SPI_Init            21
     SD_DisSelect           10
     SD_Select              21
     SD_WaitReady           48
     SD_GetResponse         52
     SD_RecvData            67
     SD_SendBlock          104
     SD_SendCmd            153
     SD_GetCID              62
     SD_GetCSD              62
     SD_GetSectorCount     154
     SD_Initialize         509
     SD_ReadDisk           126
     SD_WriteDisk          198

 
 1 591 bytes in section .far_func.text
     1 byte  in section .near.bss
     4 bytes in section .near.noinit
 
 1 591 bytes of CODE memory
     1 byte  of DATA memory (+ 4 bytes shared)

Errors: none
Warnings: none
