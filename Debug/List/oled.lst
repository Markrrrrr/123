###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             28/Oct/2019  21:00:26 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  F:\单片机例程\1.程序\IAP\IAP---已测试【2019.7.15】\STM8L #
#                    152R8T6\STM8L152R8T6_IAP_APP\oled.c                      #
#    Command line =  F:\单片机例程\1.程序\IAP\IAP---已测试【2019.7.15】\STM8L #
#                    152R8T6\STM8L152R8T6_IAP_APP\oled.c -e -Ol --no_cse      #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_cross_call --debug --code_model medium              #
#                    --data_model medium -o F:\单片机例程\1.程序\IAP\IAP---已 #
#                    测试【2019.7.15】\STM8L152R8T6\STM8L152R8T6_IAP_APP\Debu #
#                    g\Obj\ --dlib_config "D:\Program Files (x86)\IAR         #
#                    Systems\Embedded Workbench 6.0\stm8\LIB\dlstm8mmn.h"     #
#                    -lcN F:\单片机例程\1.程序\IAP\IAP---已测试【2019.7.15】\ #
#                    STM8L152R8T6\STM8L152R8T6_IAP_APP\Debug\List\ -I         #
#                    F:\单片机例程\1.程序\IAP\IAP---已测试【2019.7.15】\STM8L #
#                    152R8T6\STM8L152R8T6_IAP_APP\ -I                         #
#                    F:\单片机例程\1.程序\IAP\IAP---已测试【2019.7.15】\STM8L #
#                    152R8T6\STM8L152R8T6_IAP_APP\SDCARD\ -I                  #
#                    F:\单片机例程\1.程序\IAP\IAP---已测试【2019.7.15】\STM8L #
#                    152R8T6\STM8L152R8T6_IAP_APP\src\ --vregs 16             #
#    List file    =  F:\单片机例程\1.程序\IAP\IAP---已测试【2019.7.15】\STM8L #
#                    152R8T6\STM8L152R8T6_IAP_APP\Debug\List\oled.lst         #
#    Object file  =  F:\单片机例程\1.程序\IAP\IAP---已测试【2019.7.15】\STM8L #
#                    152R8T6\STM8L152R8T6_IAP_APP\Debug\Obj\oled.o            #
#                                                                             #
#                                                                             #
###############################################################################

F:\单片机例程\1.程序\IAP\IAP---已测试【2019.7.15】\STM8L152R8T6\STM8L152R8T6_IAP_APP\oled.c
      1          /******************************************************************************
      2          
      3                    版权所有 (C), 2011-2012, 信意电子科技(http://xydz123.taobao.com/)
      4          
      5           ******************************************************************************
      6            文 件 名   : oled.c
      7            版 本 号   : v1.0
      8            作    者   : Guokaiyi
      9            生成日期   : 2012-12-1
     10            最近修改   : 
     11            功能描述   : LED128x64OLED显示屏底层驱动
     12            修改历史   :
     13            1.日    期   : 2012-12-1
     14              作    者   : Guokaiyi
     15              修改内容   : 创建文件
     16          ******************************************************************************/
     17          
     18          /*----------------------------------------------------------------------------*
     19           * 包含头文件                                                                 *
     20           *----------------------------------------------------------------------------*/
     21          #include<iostm8l152R8.h>  /*  头文件 */
     22          
     23          #include "OLED.h"
     24          
     25          extern void delay(unsigned int ms);
     26          /*----------------------------------------------------------------------------*
     27           * 宏定义                                                                     *
     28           *----------------------------------------------------------------------------*/
     29          
     30          /*----------------------------------------------------------------------------*
     31           * 全局变量                                                                   *
     32           *----------------------------------------------------------------------------*/
     33          /*
     34          sbit LED_SCL = P1^0;  
     35          sbit LED_SDA = P1^1;
     36          sbit LED_RST = P1^2; 
     37          sbit LED_DC  = P1^3; 
     38          
     39          #define Dc  PB_ODR_bit.ODR6//PB1====DC
     40          #define Rst PB_ODR_bit.ODR5//PB2====RSTn
     41          #define Sda PD_ODR_bit.ODR4//PB3====MOSI
     42          #define Scl PB_ODR_bit.ODR7//PB4====CLK
     43          
     44          #define Dc  PB_ODR_bit.ODR7//PB1====DC=======DC
     45          #define Rst PF_ODR_bit.ODR0//PB2====RSTn=====RES
     46          #define Sda PB_ODR_bit.ODR5//PB3====MOSI=====D1
     47          #define Scl PB_ODR_bit.ODR6//PB4====CLK======D0
     48          */
     49          #define Dc  PF_ODR_bit.ODR6//PB1====DC=======DC
     50          #define Rst PF_ODR_bit.ODR7//PB2====RSTn=====RES
     51          #define Sda PF_ODR_bit.ODR4//PB3====MOSI=====D1
     52          #define Scl PF_ODR_bit.ODR5//PB4====CLK======D0
     53          
     54          
     55          //#define DcH  GPIO_WriteBit(GPIOB , GPIO_Pin_6 ,SET)//PB6====DC
     56          //#define DcL  GPIO_WriteBit(GPIOB , GPIO_Pin_6 ,RESET)//PB6====DC
     57          
     58          //#define RstH GPIO_WriteBit(GPIOB , GPIO_Pin_5 ,SET)//PB5====RSTn
     59          //#define RstL GPIO_WriteBit(GPIOB , GPIO_Pin_5 ,RESET)//PB5====RSTn
     60          
     61          //#define SdaH GPIO_WriteBit(GPIOD , GPIO_Pin_4 ,SET)//PB7====MOSI
     62          //#define SdaL GPIO_WriteBit(GPIOD , GPIO_Pin_4 ,RESET)//PB7====MOSI
     63          
     64          //#define SclH GPIO_WriteBit(GPIOB , GPIO_Pin_7 ,SET)//PD4====CLK
     65          //#define SclL GPIO_WriteBit(GPIOB , GPIO_Pin_7 ,RESET)//PD4====CLK
     66          
     67          
     68          //#define Dc  PB_ODR_bit.ODR1//PB1
     69          //#define Rst PB_ODR_bit.ODR2//PB2
     70          //#define Sda PB_ODR_bit.ODR4//PB3
     71          //#define Scl PB_ODR_bit.ODR5//PB4
     72          
     73          
     74          
     75          
     76          /*******************************************************************************
     77          **函数名称：void OLEDIO_Init()
     78          **功能描述：OLED功能引脚初始化
     79          **入口参数：无
     80          **输出：无
     81          *******************************************************************************/
     82          void OLEDIO_Init()
     83          {
     84            PD_DDR_bit.DDR6 = 1; PD_CR1_bit.C16=1; PD_CR2_bit.C26 = 1;//电源控制
     85            
     86            
     87            PF_DDR_bit.DDR4 = 1; PF_CR1_bit.C14 = 1; PF_CR2_bit.C24 = 1;//DC
     88            PF_DDR_bit.DDR5 = 1; PF_CR1_bit.C15 = 1; PF_CR2_bit.C25 = 1;//RES
     89            PF_DDR_bit.DDR6 = 1; PF_CR1_bit.C16 = 1; PF_CR2_bit.C26 = 1;//D1
     90            PF_DDR_bit.DDR7 = 1; PF_CR1_bit.C17 = 1; PF_CR2_bit.C27 = 1;//D0
     91            
     92            
     93            
     94            
     95            
     96            
     97            OLEDPOW_ON;
     98          }
     99          /*******************************************************************************
    100          **函数名称：void Close_OLED_IO()
    101          **功能描述：OLED功能引脚初始化
    102          **入口参数：无
    103          **输出：无
    104          *******************************************************************************/
    105          void Close_OLED_IO()
    106          {
    107            PC_ODR_bit.ODR6=0;//OLED
    108            PC_ODR_bit.ODR5=0;//OLED
    109            PE_ODR_bit.ODR6=0;//OLED
    110            PC_ODR_bit.ODR7=0;//OLED
    111          }
    112          
    113          
    114          const uchar F6x8[] =
    115          {
    116          0xC0,0xF0,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0xF0,
    117          0x03,0x0F,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x0F,
    118          
    119          0xC0,0xF0,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0xF0,0xF0,0x10,0xF0,
    120          0x03,0x0F,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x0F,0x0F,0x08,0x0F,
    121          
    122          0xC0,0xF0,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0xF0,0xF0,0x10,0xF0,0xF0,0x10,0xF0,
    123          0x03,0x0F,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x0F,0x0F,0x08,0x0F,0x0F,0x08,0x0F,
    124          
    125          0xC0,0xF0,0x10,0x10,0x10,0x10,0xF0,0xF0,0x10,0xF0,0xF0,0x10,0xF0,0xF0,0x10,0xF0,
    126          0x03,0x0F,0x08,0x08,0x08,0x08,0x0F,0x0F,0x08,0x0F,0x0F,0x08,0x0F,0x0F,0x08,0x0F,
    127          
    128          0xC0,0xF0,0x10,0xF0,0xF0,0x10,0xF0,0xF0,0x10,0xF0,0xF0,0x10,0xF0,0xF0,0x10,0xF0,
    129          0x03,0x0F,0x08,0x0F,0x0F,0x08,0x0F,0x0F,0x08,0x0F,0x0F,0x08,0x0F,0x0F,0x08,0x0F,
    130          
    131          };
    132          
    133          /*
    134          电池容量--没电
    135          0xC0,0xF0,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0xF0,
    136          0x03,0x0F,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x0F,
    137          
    138          电池容量--一格
    139          0xC0,0xF0,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0xF0,0xF0,0x10,0xF0,
    140          0x03,0x0F,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x0F,0x0F,0x08,0x0F,
    141          
    142          电池容量--二格
    143          0xC0,0xF0,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0xF0,0xF0,0x10,0xF0,0xF0,0x10,0xF0,
    144          0x03,0x0F,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x0F,0x0F,0x08,0x0F,0x0F,0x08,0x0F,
    145          
    146          电池容量--三格
    147          0xC0,0xF0,0x10,0x10,0x10,0x10,0xF0,0xF0,0x10,0xF0,0xF0,0x10,0xF0,0xF0,0x10,0xF0,
    148          0x03,0x0F,0x08,0x08,0x08,0x08,0x0F,0x0F,0x08,0x0F,0x0F,0x08,0x0F,0x0F,0x08,0x0F,
    149          
    150          电池容量--满格
    151          0xC0,0xF0,0x10,0xF0,0xF0,0x10,0xF0,0xF0,0x10,0xF0,0xF0,0x10,0xF0,0xF0,0x10,0xF0,
    152          0x03,0x0F,0x08,0x0F,0x0F,0x08,0x0F,0x0F,0x08,0x0F,0x0F,0x08,0x0F,0x0F,0x08,0x0F,
    153          
    154          
    155          */
    156          
    157          
    158          
    159          //中文字符串原字
    160          /*
    161          const uchar F14x16_Idx[] = 
    162          {
    163              //"好博窗控甘华茂"//字符需要列出
    164          		//"锁已经打开"
    165            "验证失败"
    166          		
    167          };
    168          */
    169          
    170          //======================================================
    171          // 128X64OLED液晶底层驱动[14X16]字体库
    172          // 设计者: Guokaiyi
    173          // 描  述: [14X16]西文字符的字模数据 (纵向取模,字节倒序)
    174          // !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
    175          //======================================================
    176          /*
    177          const uchar F14x16[] =
    178          {
    179            0x00,
    180          };
    181          */
    182          
    183          //中文字符串原字
    184          const uchar F16x16_Idx[] = 
    185          {
    186              //"好博窗控甘华茂"//字符需要列出
    187            "返回确定正在初始化请"
    188            "输入密码错误设置操作"
    189            "失败已开锁录指纹验证"
    190            "管理员剩余电量菜单添"
    191            "加用户删除普通语言恢"
    192            "复出厂注册按手编号中"
    193            "文退成功过储存信息计"
    194            "再不致容满时间欢迎使"
    195            "认启动卡片选择常开音"
    196            "网络空高低打关闭稍后"
    197            "系统记查询刷版本数老"
    198            "测试模式"
    199          };
    200          
    201          const uchar F24x24_Idx[] = 
    202          {
    203            "退出系统恢复出厂"
    204          };
    205          //======================================================
    206          // 128X64OLED液晶底层驱动[8X16]字体库
    207          // 设计者: Guokaiyi
    208          // 描  述: [16X16]西文字符的字模数据 (纵向取模,字节倒序)
    209          // !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
    210          //======================================================
    211          const uchar F16x16[] =
    212          {
    213          0x40,0x40,0x42,0xCC,0x00,0x00,0xFC,0x24,0xA4,0x24,0x22,0x22,0xA3,0x62,0x00,0x00,
    214          0x00,0x40,0x20,0x1F,0x20,0x58,0x47,0x50,0x48,0x45,0x42,0x45,0x48,0x50,0x40,0x00,/*"返",0*/
    215          /* (16 X 16 , 宋体 )*/
    216          
    217          0x00,0x00,0xFE,0x02,0x02,0xF2,0x12,0x12,0x12,0xF2,0x02,0x02,0xFE,0x00,0x00,0x00,
    218          0x00,0x00,0x7F,0x20,0x20,0x27,0x24,0x24,0x24,0x27,0x20,0x20,0x7F,0x00,0x00,0x00,/*"回",1*/
    219          /* (16 X 16 , 宋体 )*/
    220          
    221          0x04,0x84,0xE4,0x5C,0x44,0xC4,0x20,0x10,0xE8,0x27,0x24,0xE4,0x34,0x2C,0xE0,0x00,
    222          0x02,0x01,0x7F,0x10,0x10,0x3F,0x80,0x60,0x1F,0x09,0x09,0x3F,0x49,0x89,0x7F,0x00,/*"确",2*/
    223          /* (16 X 16 , 宋体 )*/
    224          
    225          0x10,0x0C,0x44,0x44,0x44,0x44,0x45,0xC6,0x44,0x44,0x44,0x44,0x44,0x14,0x0C,0x00,
    226          0x80,0x40,0x20,0x1E,0x20,0x40,0x40,0x7F,0x44,0x44,0x44,0x44,0x44,0x40,0x40,0x00,/*"定",3*/
    227          /* (16 X 16 , 宋体 )*/
    228          
    229          0x00,0x02,0x02,0xC2,0x02,0x02,0x02,0xFE,0x82,0x82,0x82,0x82,0x82,0x02,0x00,0x00,
    230          0x40,0x40,0x40,0x7F,0x40,0x40,0x40,0x7F,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,/*"正",4*/
    231          /* (16 X 16 , 宋体 )*/
    232          
    233          0x08,0x08,0x88,0xC8,0x38,0x0C,0x0B,0x08,0x08,0xE8,0x08,0x08,0x08,0x08,0x08,0x00,
    234          0x02,0x01,0x00,0xFF,0x40,0x41,0x41,0x41,0x41,0x7F,0x41,0x41,0x41,0x41,0x40,0x00,/*"在",5*/
    235          /* (16 X 16 , 宋体 )*/
    236          
    237          0x08,0x08,0x89,0xEA,0x18,0x88,0x00,0x04,0x04,0xFC,0x04,0x04,0x04,0xFC,0x00,0x00,
    238          0x02,0x01,0x00,0xFF,0x01,0x86,0x40,0x20,0x18,0x07,0x40,0x80,0x40,0x3F,0x00,0x00,/*"初",6*/
    239          /* (16 X 16 , 宋体 )*/
    240          
    241          0x10,0x10,0xF0,0x1F,0x10,0xF0,0x00,0x40,0xE0,0x58,0x47,0x40,0x50,0x60,0xC0,0x00,
    242          0x40,0x22,0x15,0x08,0x16,0x21,0x00,0x00,0xFE,0x42,0x42,0x42,0x42,0xFE,0x00,0x00,/*"始",7*/
    243          /* (16 X 16 , 宋体 )*/
    244          
    245          0x00,0x80,0x60,0xF8,0x07,0x00,0x00,0x00,0xFF,0x40,0x20,0x10,0x08,0x04,0x00,0x00,
    246          0x01,0x00,0x00,0xFF,0x00,0x04,0x02,0x01,0x3F,0x40,0x40,0x40,0x40,0x40,0x78,0x00,/*"化",8*/
    247          /* (16 X 16 , 宋体 )*/
    248          
    249          0x40,0x42,0xCC,0x00,0x00,0x44,0x54,0x54,0x54,0x7F,0x54,0x54,0x54,0x44,0x40,0x00,
    250          0x00,0x00,0x7F,0x20,0x10,0x00,0xFF,0x15,0x15,0x15,0x55,0x95,0x7F,0x00,0x00,0x00,/*"请",9*/
    251          /* (16 X 16 , 宋体 )*/
    252          
    253          0x88,0x68,0x1F,0xC8,0x08,0x10,0xC8,0x54,0x52,0xD1,0x12,0x94,0x08,0xD0,0x10,0x00,
    254          0x09,0x19,0x09,0xFF,0x05,0x00,0xFF,0x12,0x92,0xFF,0x00,0x5F,0x80,0x7F,0x00,0x00,/*"输",0*/
    255          /* (16 X 16 , 宋体 )*/
    256          
    257          0x00,0x00,0x00,0x00,0x00,0x01,0xE2,0x1C,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    258          0x80,0x40,0x20,0x10,0x0C,0x03,0x00,0x00,0x00,0x03,0x0C,0x30,0x40,0x80,0x80,0x00,/*"入",1*/
    259          /* (16 X 16 , 宋体 )*/
    260          
    261          0x10,0x8C,0x44,0x04,0xE4,0x04,0x95,0xA6,0x44,0x24,0x14,0x84,0x44,0x94,0x0C,0x00,
    262          0x02,0x02,0x7A,0x41,0x41,0x43,0x42,0x7E,0x42,0x42,0x42,0x43,0xF8,0x00,0x00,0x00,/*"密",2*/
    263          /* (16 X 16 , 宋体 )*/
    264          
    265          0x04,0x84,0xE4,0x5C,0x44,0xC4,0x00,0x02,0xF2,0x82,0x82,0x82,0xFE,0x80,0x80,0x00,
    266          0x02,0x01,0x7F,0x10,0x10,0x3F,0x00,0x08,0x08,0x08,0x08,0x48,0x88,0x40,0x3F,0x00,/*"码",3*/
    267          /* (16 X 16 , 宋体 )*/
    268          
    269          0x40,0x30,0xEF,0x24,0x64,0x48,0x48,0x7F,0x48,0x48,0x48,0x7F,0x48,0x48,0x40,0x00,
    270          0x01,0x01,0x7F,0x21,0x11,0x00,0xFF,0x49,0x49,0x49,0x49,0x49,0xFF,0x00,0x00,0x00,/*"错",4*/
    271          /* (16 X 16 , 宋体 )*/
    272          
    273          0x40,0x42,0xCC,0x00,0x00,0x80,0x9E,0x92,0x92,0x92,0x92,0x92,0x9E,0x80,0x00,0x00,
    274          0x00,0x00,0x7F,0x20,0x94,0x84,0x44,0x24,0x14,0x0F,0x14,0x24,0x44,0x84,0x84,0x00,/*"误",5*/
    275          /* (16 X 16 , 宋体 )*/
    276          
    277          0x40,0x40,0x42,0xCC,0x00,0x40,0xA0,0x9E,0x82,0x82,0x82,0x9E,0xA0,0x20,0x20,0x00,
    278          0x00,0x00,0x00,0x3F,0x90,0x88,0x40,0x43,0x2C,0x10,0x28,0x46,0x41,0x80,0x80,0x00,/*"设",6*/
    279          /* (16 X 16 , 宋体 )*/
    280          
    281          0x00,0x17,0x15,0xD5,0x55,0x57,0x55,0x7D,0x55,0x57,0x55,0xD5,0x15,0x17,0x00,0x00,
    282          0x40,0x40,0x40,0x7F,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x7F,0x40,0x40,0x40,0x00,/*"置",7*/
    283          /* (16 X 16 , 宋体 )*/
    284          
    285          0x10,0x10,0xFF,0x10,0x90,0xE0,0x2F,0x29,0xE9,0x09,0xE9,0x29,0x2F,0xE0,0x00,0x00,
    286          0x42,0x82,0x7F,0x41,0x44,0x25,0x15,0x0D,0x05,0xFE,0x0D,0x15,0x25,0x45,0x44,0x00,/*"操",8*/
    287          /* (16 X 16 , 宋体 )*/
    288          
    289          0x00,0x80,0x60,0xF8,0x07,0x40,0x30,0x0F,0xF8,0x88,0x88,0x88,0x88,0x08,0x08,0x00,
    290          0x01,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x08,0x08,0x08,0x08,0x08,0x00,0x00,/*"作",9*/
    291          /* (16 X 16 , 宋体 )*/
    292          
    293          0x00,0x40,0x30,0x1E,0x10,0x10,0x10,0xFF,0x10,0x10,0x10,0x10,0x10,0x00,0x00,0x00,
    294          0x81,0x81,0x41,0x21,0x11,0x0D,0x03,0x01,0x03,0x0D,0x11,0x21,0x41,0x81,0x81,0x00,/*"失",0*/
    295          /* (16 X 16 , 宋体 )*/
    296          
    297          0x00,0xFE,0x02,0xFA,0x02,0xFE,0x40,0x20,0xD8,0x17,0x10,0x10,0xF0,0x10,0x10,0x00,
    298          0x80,0x47,0x30,0x0F,0x10,0x67,0x80,0x40,0x21,0x16,0x08,0x16,0x21,0x40,0x80,0x00,/*"败",1*/
    299          /* (16 X 16 , 宋体 )*/
    300          
    301          0x00,0x00,0xE2,0x82,0x82,0x82,0x82,0x82,0x82,0x82,0x82,0xFE,0x00,0x00,0x00,0x00,
    302          0x00,0x00,0x3F,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x78,0x00,0x00,/*"已",2*/
    303          /* (16 X 16 , 宋体 )*/
    304          
    305          0x80,0x82,0x82,0x82,0xFE,0x82,0x82,0x82,0x82,0x82,0xFE,0x82,0x82,0x82,0x80,0x00,
    306          0x00,0x80,0x40,0x30,0x0F,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,/*"开",3*/
    307          /* (16 X 16 , 宋体 )*/
    308          
    309          0x20,0x10,0x2C,0xE7,0x24,0x24,0x00,0xE2,0x2C,0x20,0xBF,0x20,0x28,0xE6,0x00,0x00,
    310          0x01,0x01,0x01,0x7F,0x21,0x11,0x80,0x4F,0x20,0x10,0x0F,0x10,0x20,0x4F,0x80,0x00,/*"锁",4*/
    311          /* (16 X 16 , 宋体 )*/
    312          
    313          0x80,0x80,0x82,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0xFE,0x80,0x80,0x80,0x00,
    314          0x40,0x40,0x22,0x24,0x10,0x48,0x80,0x7F,0x04,0x08,0x18,0x24,0x22,0x40,0x40,0x00,/*"录",5*/
    315          /* (16 X 16 , 宋体 )*/
    316          
    317          0x10,0x10,0x10,0xFF,0x10,0x90,0x00,0x3F,0x48,0x48,0x44,0x44,0x44,0x42,0x70,0x00,
    318          0x04,0x44,0x82,0x7F,0x01,0x00,0x00,0xFF,0x49,0x49,0x49,0x49,0x49,0xFF,0x00,0x00,/*"指",6*/
    319          /* (16 X 16 , 宋体 )*/
    320          
    321          0x20,0x30,0xAC,0x63,0x10,0x08,0x08,0xF8,0x09,0x0E,0x08,0xF8,0x08,0x08,0x00,0x00,
    322          0x22,0x67,0x22,0x12,0x92,0x80,0x40,0x21,0x16,0x08,0x16,0x21,0x40,0x80,0x80,0x00,/*"纹",7*/
    323          /* (16 X 16 , 宋体 )*/
    324          
    325          0x02,0xFA,0x82,0x82,0xFE,0x80,0x40,0x20,0x50,0x4C,0x43,0x4C,0x50,0x20,0x40,0x00,
    326          0x08,0x18,0x48,0x84,0x44,0x3F,0x40,0x44,0x58,0x41,0x4E,0x60,0x58,0x47,0x40,0x00,/*"验",8*/
    327          /* (16 X 16 , 宋体 )*/
    328          
    329          0x40,0x40,0x42,0xCC,0x00,0x00,0x04,0xC4,0x04,0x04,0xFC,0x04,0x04,0x04,0x04,0x00,
    330          0x00,0x00,0x00,0x3F,0x10,0x48,0x40,0x7F,0x40,0x40,0x7F,0x41,0x41,0x41,0x40,0x00,/*"证",9*/
    331          /* (16 X 16 , 宋体 )*/
    332          
    333          0x88,0x64,0x23,0xA2,0xA6,0xAA,0xA2,0xBA,0xA4,0xA3,0xA2,0x26,0x2A,0xA2,0x62,0x00,
    334          0x00,0x00,0x00,0xFF,0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,0x4B,0xF8,0x00,0x00,0x00,0x00,/*"管",0*/
    335          /* (16 X 16 , 宋体 )*/
    336          
    337          0x04,0x84,0x84,0xFC,0x84,0x84,0x00,0xFE,0x92,0x92,0xFE,0x92,0x92,0xFE,0x00,0x00,
    338          0x20,0x60,0x20,0x1F,0x10,0x10,0x40,0x44,0x44,0x44,0x7F,0x44,0x44,0x44,0x40,0x00,/*"理",1*/
    339          /* (16 X 16 , 宋体 )*/
    340          
    341          0x00,0x00,0xC0,0x5E,0x52,0x52,0x52,0x52,0x52,0x52,0x52,0x5E,0xC0,0x00,0x00,0x00,
    342          0x80,0x80,0x8F,0x40,0x40,0x20,0x10,0x0E,0x10,0x10,0x20,0x20,0x4F,0x80,0x00,0x00,/*"员",2*/
    343          /* (16 X 16 , 宋体 )*/
    344          
    345          0x48,0x4A,0xFA,0x0A,0xFE,0x09,0xF9,0x49,0xA8,0x00,0x00,0xF0,0x00,0x00,0xFF,0x00,
    346          0x22,0x11,0x0B,0x04,0xFF,0x04,0x09,0x12,0x23,0x00,0x00,0x0F,0x40,0x80,0x7F,0x00,/*"剩",3*/
    347          /* (16 X 16 , 宋体 )*/
    348          
    349          0x80,0x80,0x40,0x20,0x50,0x48,0x44,0xC3,0x44,0x48,0x50,0x20,0x40,0x80,0x80,0x00,
    350          0x00,0x40,0x22,0x1A,0x02,0x42,0x82,0x7F,0x02,0x02,0x02,0x0A,0x12,0x60,0x00,0x00,/*"余",4*/
    351          /* (16 X 16 , 宋体 )*/
    352          
    353          0x00,0x00,0xF8,0x88,0x88,0x88,0x88,0xFF,0x88,0x88,0x88,0x88,0xF8,0x00,0x00,0x00,
    354          0x00,0x00,0x1F,0x08,0x08,0x08,0x08,0x7F,0x88,0x88,0x88,0x88,0x9F,0x80,0xF0,0x00,/*"电",5*/
    355          /* (16 X 16 , 宋体 )*/
    356          
    357          0x20,0x20,0x20,0xBE,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xBE,0x20,0x20,0x20,0x00,
    358          0x00,0x80,0x80,0xAF,0xAA,0xAA,0xAA,0xFF,0xAA,0xAA,0xAA,0xAF,0x80,0x80,0x00,0x00,/*"量",6*/
    359          /* (16 X 16 , 宋体 )*/
    360          
    361          0x04,0x04,0x44,0xC4,0x4F,0x44,0x44,0xC4,0x24,0x24,0x2F,0xB4,0x24,0x04,0x04,0x00,
    362          0x40,0x44,0x24,0x24,0x15,0x0C,0x04,0xFE,0x04,0x0C,0x15,0x24,0x24,0x44,0x40,0x00,/*"菜",7*/
    363          /* (16 X 16 , 宋体 )*/
    364          
    365          0x00,0x00,0xF8,0x49,0x4A,0x4C,0x48,0xF8,0x48,0x4C,0x4A,0x49,0xF8,0x00,0x00,0x00,
    366          0x10,0x10,0x13,0x12,0x12,0x12,0x12,0xFF,0x12,0x12,0x12,0x12,0x13,0x10,0x10,0x00,/*"单",8*/
    367          /* (16 X 16 , 宋体 )*/
    368          
    369          0x10,0x60,0x02,0x8C,0x00,0x10,0x92,0x52,0x32,0x1E,0x32,0x52,0x92,0x12,0x10,0x00,
    370          0x04,0x04,0x7E,0x01,0x00,0x21,0x18,0x40,0x80,0x7F,0x08,0x30,0x04,0x09,0x31,0x00,/*"添",9*/
    371          /* (16 X 16 , 宋体 )*/
    372          
    373          0x10,0x10,0x10,0xFF,0x10,0x10,0xF0,0x00,0x00,0xF8,0x08,0x08,0x08,0xF8,0x00,0x00,
    374          0x80,0x40,0x30,0x0F,0x40,0x80,0x7F,0x00,0x00,0x7F,0x20,0x20,0x20,0x7F,0x00,0x00,/*"加",0*/
    375          /* (16 X 16 , 宋体 )*/
    376          
    377          0x00,0x00,0xFE,0x22,0x22,0x22,0x22,0xFE,0x22,0x22,0x22,0x22,0xFE,0x00,0x00,0x00,
    378          0x80,0x60,0x1F,0x02,0x02,0x02,0x02,0x7F,0x02,0x02,0x42,0x82,0x7F,0x00,0x00,0x00,/*"用",1*/
    379          /* (16 X 16 , 宋体 )*/
    380          
    381          0x00,0x00,0x00,0xF8,0x08,0x08,0x09,0x0E,0x08,0x08,0x08,0x08,0xF8,0x00,0x00,0x00,
    382          0x00,0x80,0x60,0x1F,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x03,0x00,0x00,0x00,/*"户",2*/
    383          /* (16 X 16 , 宋体 )*/
    384          
    385          0x80,0xFE,0x82,0x82,0xFE,0x80,0xFE,0x82,0x82,0xFE,0x80,0x00,0xF8,0x00,0xFF,0x00,
    386          0x40,0x3F,0x00,0x20,0xBF,0x40,0x3F,0x40,0x80,0x7F,0x00,0x00,0x4F,0x80,0x7F,0x00,/*"删",3*/
    387          /* (16 X 16 , 宋体 )*/
    388          
    389          0x00,0xFE,0x22,0x5A,0x86,0x20,0x10,0x28,0x24,0xE3,0x24,0x28,0x10,0x20,0x20,0x00,
    390          0x00,0xFF,0x04,0x08,0x27,0x11,0x0D,0x41,0x81,0x7F,0x01,0x05,0x09,0x31,0x00,0x00,/*"除",4*/
    391          /* (16 X 16 , 宋体 )*/
    392          
    393          0x40,0x44,0x54,0x64,0x45,0x7E,0x44,0x44,0x44,0x7E,0x45,0x64,0x54,0x44,0x40,0x00,
    394          0x00,0x00,0x00,0xFF,0x49,0x49,0x49,0x49,0x49,0x49,0x49,0xFF,0x00,0x00,0x00,0x00,/*"普",5*/
    395          /* (16 X 16 , 宋体 )*/
    396          
    397          0x40,0x42,0xCC,0x00,0x00,0xE2,0x22,0x2A,0x2A,0xF2,0x2A,0x26,0x22,0xE0,0x00,0x00,
    398          0x80,0x40,0x3F,0x40,0x80,0xFF,0x89,0x89,0x89,0xBF,0x89,0xA9,0xC9,0xBF,0x80,0x00,/*"通",6*/
    399          /* (16 X 16 , 宋体 )*/
    400          
    401          0x40,0x42,0xCC,0x00,0x00,0x82,0x92,0x92,0xF2,0x9E,0x92,0x92,0xF2,0x82,0x80,0x00,
    402          0x00,0x00,0x7F,0x20,0x10,0x00,0xFC,0x44,0x44,0x44,0x44,0x44,0xFC,0x00,0x00,0x00,/*"语",7*/
    403          /* (16 X 16 , 宋体 )*/
    404          
    405          0x04,0x04,0x24,0x24,0x24,0x24,0x25,0x26,0x24,0x24,0x24,0x24,0x24,0x04,0x04,0x00,
    406          0x00,0x00,0xF9,0x49,0x49,0x49,0x49,0x49,0x49,0x49,0x49,0x49,0xF9,0x00,0x00,0x00,/*"言",8*/
    407          /* (16 X 16 , 宋体 )*/
    408          
    409          0x00,0xE0,0x00,0xFF,0x10,0x20,0x08,0x88,0x78,0x0F,0x08,0xE8,0x08,0x08,0x88,0x00,
    410          0x01,0x00,0x00,0xFF,0x00,0x10,0x0C,0x83,0x44,0x23,0x18,0x07,0x18,0x62,0x81,0x00,/*"恢",9*/
    411          /* (16 X 16 , 宋体 )*/
    412          
    413          0x20,0x10,0x08,0xF7,0x54,0x54,0x54,0x54,0x54,0x54,0x54,0xF4,0x04,0x04,0x00,0x00,
    414          0x80,0x90,0x90,0x49,0x4D,0x57,0x25,0x25,0x25,0x55,0x4D,0x45,0x80,0x80,0x80,0x00,/*"复",0*/
    415          /* (16 X 16 , 宋体 )*/
    416          
    417          0x00,0x00,0x7C,0x40,0x40,0x40,0x40,0xFF,0x40,0x40,0x40,0x40,0xFC,0x00,0x00,0x00,
    418          0x00,0x7C,0x40,0x40,0x40,0x40,0x40,0x7F,0x40,0x40,0x40,0x40,0x40,0xFC,0x00,0x00,/*"出",1*/
    419          /* (16 X 16 , 宋体 )*/
    420          
    421          0x00,0x00,0xFE,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x00,
    422          0x80,0x60,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"厂",2*/
    423          /* (16 X 16 , 宋体 )*/
    424          
    425          0x10,0x60,0x02,0x8C,0x00,0x08,0x08,0x08,0x09,0xFA,0x08,0x08,0x08,0x08,0x00,0x00,
    426          0x04,0x04,0x7E,0x01,0x40,0x40,0x41,0x41,0x41,0x7F,0x41,0x41,0x41,0x41,0x40,0x00,/*"注",3*/
    427          /* (16 X 16 , 宋体 )*/
    428          
    429          0x80,0x80,0x80,0xFE,0x82,0x82,0xFE,0x80,0x80,0xFE,0x82,0x82,0xFE,0x80,0x80,0x00,
    430          0x00,0x80,0x40,0x3F,0x00,0x40,0x7F,0x80,0x60,0x1F,0x40,0x80,0x7F,0x00,0x00,0x00,/*"册",4*/
    431          /* (16 X 16 , 宋体 )*/
    432          
    433          0x10,0x10,0x10,0xFF,0x90,0x20,0x98,0x88,0x88,0xE9,0x8E,0x88,0x88,0xA8,0x98,0x00,
    434          0x02,0x42,0x81,0x7F,0x00,0x00,0x80,0x84,0x4B,0x28,0x10,0x28,0x47,0x80,0x00,0x00,/*"按",5*/
    435          /* (16 X 16 , 宋体 )*/
    436          
    437          0x00,0x00,0x24,0x24,0x24,0x24,0x24,0xFC,0x22,0x22,0x22,0x23,0x22,0x00,0x00,0x00,
    438          0x02,0x02,0x02,0x02,0x02,0x42,0x82,0x7F,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x00,/*"手",6*/
    439          /* (16 X 16 , 宋体 )*/
    440          
    441          0x20,0x30,0xAC,0x63,0x30,0x00,0xFC,0x24,0x25,0x26,0x24,0x24,0x24,0x3C,0x00,0x00,
    442          0x22,0x67,0x22,0x12,0x52,0x38,0x07,0xFF,0x09,0x7F,0x09,0x3F,0x89,0xFF,0x00,0x00,/*"编",7*/
    443          /* (16 X 16 , 宋体 )*/
    444          
    445          0x80,0x80,0x80,0xBE,0xA2,0xA2,0xA2,0xA2,0xA2,0xA2,0xA2,0xBE,0x80,0x80,0x80,0x00,
    446          0x00,0x00,0x00,0x06,0x05,0x04,0x04,0x04,0x44,0x84,0x44,0x3C,0x00,0x00,0x00,0x00,/*"号",8*/
    447          /* (16 X 16 , 宋体 )*/
    448          
    449          0x00,0x00,0xF0,0x10,0x10,0x10,0x10,0xFF,0x10,0x10,0x10,0x10,0xF0,0x00,0x00,0x00,
    450          0x00,0x00,0x0F,0x04,0x04,0x04,0x04,0xFF,0x04,0x04,0x04,0x04,0x0F,0x00,0x00,0x00,/*"中",9*/
    451          /* (16 X 16 , 宋体 )*/
    452          
    453          0x08,0x08,0x08,0x38,0xC8,0x08,0x09,0x0E,0x08,0x08,0xC8,0x38,0x08,0x08,0x08,0x00,
    454          0x80,0x80,0x40,0x40,0x20,0x11,0x0A,0x04,0x0A,0x11,0x20,0x40,0x40,0x80,0x80,0x00,/*"文",0*/
    455          /* (16 X 16 , 宋体 )*/
    456          
    457          0x40,0x40,0x42,0xCC,0x00,0x00,0xFF,0x49,0x49,0xC9,0x49,0x49,0x7F,0x80,0x00,0x00,
    458          0x00,0x40,0x20,0x1F,0x20,0x40,0x5F,0x48,0x44,0x40,0x41,0x42,0x45,0x58,0x40,0x00,/*"退",1*/
    459          /* (16 X 16 , 宋体 )*/
    460          
    461          0x00,0x00,0xF8,0x88,0x88,0x88,0x88,0x08,0x08,0xFF,0x08,0x09,0x0A,0xC8,0x08,0x00,
    462          0x80,0x60,0x1F,0x00,0x10,0x20,0x1F,0x80,0x40,0x21,0x16,0x18,0x26,0x41,0xF8,0x00,/*"成",2*/
    463          /* (16 X 16 , 宋体 )*/
    464          
    465          0x08,0x08,0x08,0xF8,0x08,0x08,0x08,0x10,0x10,0xFF,0x10,0x10,0x10,0xF0,0x00,0x00,
    466          0x10,0x30,0x10,0x1F,0x08,0x88,0x48,0x30,0x0E,0x01,0x40,0x80,0x40,0x3F,0x00,0x00,/*"功",3*/
    467          /* (16 X 16 , 宋体 )*/
    468          
    469          0x40,0x40,0x42,0xCC,0x00,0x08,0x48,0x88,0x08,0x08,0x08,0xFF,0x08,0x08,0x08,0x00,
    470          0x00,0x40,0x20,0x1F,0x20,0x40,0x40,0x41,0x40,0x48,0x50,0x4F,0x40,0x40,0x40,0x00,/*"过",4*/
    471          /* (16 X 16 , 宋体 )*/
    472          
    473          0x80,0x60,0xF8,0x87,0x84,0x98,0x00,0x20,0x24,0xA4,0x7F,0x24,0x34,0x28,0x24,0x00,
    474          0x00,0x00,0xFF,0x00,0x00,0x7F,0x24,0x12,0x01,0xFF,0x49,0x49,0x49,0xFF,0x00,0x00,/*"储",5*/
    475          /* (16 X 16 , 宋体 )*/
    476          
    477          0x04,0x04,0x84,0xE4,0x1C,0x07,0x24,0x24,0x24,0x24,0xA4,0x64,0x24,0x04,0x04,0x00,
    478          0x02,0x01,0x00,0xFF,0x00,0x02,0x02,0x42,0x82,0x7F,0x02,0x02,0x02,0x02,0x02,0x00,/*"存",6*/
    479          /* (16 X 16 , 宋体 )*/
    480          
    481          0x00,0x80,0x60,0xF8,0x07,0x00,0x04,0x24,0x24,0x25,0x26,0x24,0x24,0x24,0x04,0x00,
    482          0x01,0x00,0x00,0xFF,0x00,0x00,0x00,0xF9,0x49,0x49,0x49,0x49,0x49,0xF9,0x00,0x00,/*"信",7*/
    483          /* (16 X 16 , 宋体 )*/
    484          
    485          0x00,0x00,0x00,0xFC,0x54,0x54,0x56,0x55,0x54,0x54,0x54,0xFC,0x00,0x00,0x00,0x00,
    486          0x40,0x30,0x00,0x03,0x39,0x41,0x41,0x45,0x59,0x41,0x41,0x73,0x00,0x08,0x30,0x00,/*"息",8*/
    487          /* (16 X 16 , 宋体 )*/
    488          
    489          0x40,0x40,0x42,0xCC,0x00,0x40,0x40,0x40,0x40,0xFF,0x40,0x40,0x40,0x40,0x40,0x00,
    490          0x00,0x00,0x00,0x7F,0x20,0x10,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,/*"计",9*/
    491          /* (16 X 16 , 宋体 )*/
    492          
    493          0x02,0x02,0xF2,0x92,0x92,0x92,0x92,0xFE,0x92,0x92,0x92,0x92,0xF2,0x02,0x02,0x00,
    494          0x04,0x04,0xFF,0x04,0x04,0x04,0x04,0x07,0x04,0x04,0x44,0x84,0x7F,0x04,0x04,0x00,/*"再",0*/
    495          /* (16 X 16 , 宋体 )*/
    496          
    497          0x00,0x02,0x02,0x02,0x02,0x82,0x42,0xF2,0x0E,0x42,0x82,0x02,0x02,0x02,0x00,0x00,
    498          0x10,0x08,0x04,0x02,0x01,0x00,0x00,0xFF,0x00,0x00,0x00,0x01,0x02,0x0C,0x00,0x00,/*"不",1*/
    499          /* (16 X 16 , 宋体 )*/
    500          
    501          0x42,0x62,0x5A,0xC6,0x52,0x62,0xC2,0x20,0xD8,0x17,0x10,0x10,0xF0,0x10,0x10,0x00,
    502          0x40,0xC4,0x44,0x7F,0x24,0x24,0xA0,0x40,0x21,0x16,0x08,0x16,0x21,0x40,0x80,0x00,/*"致",2*/
    503          /* (16 X 16 , 宋体 )*/
    504          
    505          0x10,0x0C,0x44,0x24,0x14,0x84,0x45,0x26,0x44,0x84,0x14,0x24,0x44,0x14,0x0C,0x00,
    506          0x04,0x04,0x02,0xFE,0x45,0x44,0x44,0x44,0x44,0x44,0x45,0xFE,0x02,0x04,0x04,0x00,/*"容",3*/
    507          /* (16 X 16 , 宋体 )*/
    508          
    509          0x10,0x60,0x02,0x8C,0x00,0x24,0x24,0x2F,0xE4,0x24,0x24,0xE4,0x2F,0x24,0x24,0x00,
    510          0x04,0x04,0x7E,0x01,0x00,0xFF,0x11,0x09,0x07,0x19,0x09,0x07,0x49,0x91,0x7F,0x00,/*"满",4*/
    511          /* (16 X 16 , 宋体 )*/
    512          
    513          0x00,0xFC,0x84,0x84,0x84,0xFC,0x00,0x10,0x10,0x10,0x10,0x10,0xFF,0x10,0x10,0x00,
    514          0x00,0x3F,0x10,0x10,0x10,0x3F,0x00,0x00,0x01,0x06,0x40,0x80,0x7F,0x00,0x00,0x00,/*"时",5*/
    515          /* (16 X 16 , 宋体 )*/
    516          
    517          0x00,0xF8,0x01,0x06,0x00,0xF0,0x12,0x12,0x12,0xF2,0x02,0x02,0x02,0xFE,0x00,0x00,
    518          0x00,0xFF,0x00,0x00,0x00,0x1F,0x11,0x11,0x11,0x1F,0x00,0x40,0x80,0x7F,0x00,0x00,/*"间",6*/
    519          /* (16 X 16 , 宋体 )*/
    520          
    521          0x04,0x24,0x44,0x84,0x64,0x9C,0x40,0x30,0x0F,0xC8,0x08,0x08,0x28,0x18,0x00,0x00,
    522          0x10,0x08,0x06,0x01,0x82,0x4C,0x20,0x18,0x06,0x01,0x06,0x18,0x20,0x40,0x80,0x00,/*"欢",7*/
    523          /* (16 X 16 , 宋体 )*/
    524          
    525          0x40,0x40,0x42,0xCC,0x00,0x00,0xFC,0x04,0x02,0x00,0xFC,0x04,0x04,0xFC,0x00,0x00,
    526          0x00,0x40,0x20,0x1F,0x20,0x40,0x4F,0x44,0x42,0x40,0x7F,0x42,0x44,0x43,0x40,0x00,/*"迎",8*/
    527          /* (16 X 16 , 宋体 )*/
    528          
    529          0x80,0x60,0xF8,0x07,0x04,0xE4,0x24,0x24,0x24,0xFF,0x24,0x24,0x24,0xE4,0x04,0x00,
    530          0x00,0x00,0xFF,0x00,0x80,0x81,0x45,0x29,0x11,0x2F,0x41,0x41,0x81,0x81,0x80,0x00,/*"使",9*/
    531          /* (16 X 16 , 宋体 )*/
    532          
    533          0x40,0x40,0x42,0xCC,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
    534          0x00,0x00,0x00,0x3F,0x90,0x48,0x20,0x18,0x07,0x00,0x07,0x18,0x20,0x40,0x80,0x00,/*"认",0*/
    535          /* (16 X 16 , 宋体 )*/
    536          
    537          0x00,0x00,0x00,0xFC,0x44,0x44,0x44,0x45,0x46,0x44,0x44,0x44,0x44,0x7C,0x00,0x00,
    538          0x40,0x20,0x18,0x07,0x00,0xFC,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0xFC,0x00,0x00,/*"启",1*/
    539          /* (16 X 16 , 宋体 )*/
    540          
    541          0x40,0x44,0xC4,0x44,0x44,0x44,0x40,0x10,0x10,0xFF,0x10,0x10,0x10,0xF0,0x00,0x00,
    542          0x10,0x3C,0x13,0x10,0x14,0xB8,0x40,0x30,0x0E,0x01,0x40,0x80,0x40,0x3F,0x00,0x00,/*"动",2*/
    543          /* (16 X 16 , 宋体 )*/
    544          
    545          0x40,0x40,0x40,0x40,0x40,0x40,0xFF,0x44,0x44,0x44,0x44,0x44,0x44,0x40,0x40,0x00,
    546          0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x02,0x04,0x08,0x10,0x00,0x00,0x00,/*"卡",3*/
    547          /* (16 X 16 , 宋体 )*/
    548          
    549          0x00,0x00,0x00,0xFE,0x20,0x20,0x20,0x20,0x20,0x3F,0x20,0x20,0x20,0x20,0x00,0x00,
    550          0x00,0x80,0x60,0x1F,0x02,0x02,0x02,0x02,0x02,0x02,0xFE,0x00,0x00,0x00,0x00,0x00,/*"片",4*/
    551          /* (16 X 16 , 宋体 )*/
    552          
    553          0x40,0x40,0x42,0xCC,0x00,0x50,0x4E,0xC8,0x48,0x7F,0xC8,0x48,0x48,0x40,0x00,0x00,
    554          0x00,0x40,0x20,0x1F,0x20,0x50,0x4C,0x43,0x40,0x40,0x4F,0x50,0x50,0x5C,0x40,0x00,/*"选",5*/
    555          /* (16 X 16 , 宋体 )*/
    556          
    557          0x10,0x10,0xFF,0x10,0x00,0x82,0x86,0x4A,0x52,0xA2,0x52,0x4A,0x86,0x80,0x80,0x00,
    558          0x42,0x82,0x7F,0x01,0x00,0x10,0x12,0x12,0x12,0xFF,0x12,0x12,0x12,0x10,0x00,0x00,/*"择",6*/
    559          /* (16 X 16 , 宋体 )*/
    560          
    561          0x20,0x18,0x08,0xEA,0xAC,0xA8,0xA8,0xAF,0xA8,0xA8,0xAC,0xEA,0x08,0x28,0x18,0x00,
    562          0x00,0x00,0x3E,0x02,0x02,0x02,0x02,0xFF,0x02,0x02,0x12,0x22,0x1E,0x00,0x00,0x00,/*"常",7*/
    563          /* (16 X 16 , 宋体 )*/
    564          
    565          0x80,0x82,0x82,0x82,0xFE,0x82,0x82,0x82,0x82,0x82,0xFE,0x82,0x82,0x82,0x80,0x00,
    566          0x00,0x80,0x40,0x30,0x0F,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,/*"开",8*/
    567          /* (16 X 16 , 宋体 )*/
    568          
    569          0x40,0x40,0x44,0x44,0x54,0x64,0x45,0x46,0x44,0x64,0x54,0x44,0x44,0x40,0x40,0x00,
    570          0x00,0x00,0x00,0xFF,0x49,0x49,0x49,0x49,0x49,0x49,0x49,0xFF,0x00,0x00,0x00,0x00,/*"音",9*/
    571          /* (16 X 16 , 宋体 )*/
    572          
    573          0x00,0xFE,0x02,0x22,0x42,0x82,0x72,0x02,0x22,0x42,0x82,0x72,0x02,0xFE,0x00,0x00,
    574          0x00,0xFF,0x10,0x08,0x06,0x01,0x0E,0x10,0x08,0x06,0x01,0x4E,0x80,0x7F,0x00,0x00,/*"网",0*/
    575          /* (16 X 16 , 宋体 )*/
    576          
    577          0x20,0x30,0xAC,0x63,0x30,0x20,0x10,0x18,0xA7,0x44,0xA4,0x14,0x0C,0x00,0x00,0x00,
    578          0x22,0x67,0x22,0x12,0x12,0x04,0x02,0xFD,0x44,0x44,0x44,0x45,0xFD,0x02,0x02,0x00,/*"络",1*/
    579          /* (16 X 16 , 宋体 )*/
    580          
    581          0x10,0x0C,0x44,0x24,0x14,0x04,0x05,0x06,0x04,0x04,0x14,0x24,0x44,0x14,0x0C,0x00,
    582          0x00,0x40,0x40,0x41,0x41,0x41,0x41,0x7F,0x41,0x41,0x41,0x41,0x40,0x40,0x00,0x00,/*"空",2*/
    583          /* (16 X 16 , 宋体 )*/
    584          
    585          0x04,0x04,0x04,0x04,0xF4,0x94,0x95,0x96,0x94,0x94,0xF4,0x04,0x04,0x04,0x04,0x00,
    586          0x00,0xFE,0x02,0x02,0x7A,0x4A,0x4A,0x4A,0x4A,0x4A,0x7A,0x02,0x82,0xFE,0x00,0x00,/*"高",3*/
    587          /* (16 X 16 , 宋体 )*/
    588          
    589          0x00,0x80,0x60,0xF8,0x07,0x00,0xFC,0x84,0x84,0x84,0xFE,0x82,0x83,0x82,0x80,0x00,
    590          0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x40,0x20,0x00,0x41,0x8E,0x30,0x40,0xF8,0x00,/*"低",4*/
    591          /* (16 X 16 , 宋体 )*/
    592          
    593          0x10,0x10,0x10,0xFF,0x10,0x90,0x04,0x04,0x04,0x04,0xFC,0x04,0x04,0x04,0x04,0x00,
    594          0x04,0x44,0x82,0x7F,0x01,0x00,0x00,0x00,0x40,0x80,0x7F,0x00,0x00,0x00,0x00,0x00,/*"打",5*/
    595          /* (16 X 16 , 宋体 )*/
    596          
    597          0x00,0x00,0x10,0x11,0x16,0x10,0x10,0xF0,0x10,0x10,0x14,0x13,0x10,0x00,0x00,0x00,
    598          0x81,0x81,0x41,0x41,0x21,0x11,0x0D,0x03,0x0D,0x11,0x21,0x41,0x41,0x81,0x81,0x00,/*"关",6*/
    599          /* (16 X 16 , 宋体 )*/
    600          
    601          0x00,0xF8,0x01,0x22,0x20,0x22,0x22,0xA2,0xFA,0x22,0x22,0x22,0x02,0xFE,0x00,0x00,
    602          0x00,0xFF,0x00,0x08,0x04,0x02,0x11,0x20,0x1F,0x00,0x00,0x40,0x80,0x7F,0x00,0x00,/*"闭",7*/
    603          /* (16 X 16 , 宋体 )*/
    604          
    605          0x24,0x24,0xA4,0xFE,0x23,0x22,0x00,0xE2,0x2C,0x20,0x3F,0x20,0x28,0xE6,0x00,0x00,
    606          0x08,0x06,0x01,0xFF,0x01,0x06,0x00,0xFF,0x09,0x09,0x09,0x49,0x89,0x7F,0x00,0x00,/*"稍",8*/
    607          /* (16 X 16 , 宋体 )*/
    608          
    609          0x00,0x00,0x00,0xFC,0x24,0x24,0x24,0x24,0x22,0x22,0x22,0x23,0x22,0x20,0x20,0x00,
    610          0x40,0x20,0x18,0x07,0x00,0xFE,0x42,0x42,0x42,0x42,0x42,0x42,0xFE,0x00,0x00,0x00,/*"后",9*/
    611          /* (16 X 16 , 宋体 )*/
    612          
    613          0x00,0x00,0x22,0x32,0x2A,0xA6,0xA2,0x62,0x21,0x11,0x09,0x81,0x01,0x00,0x00,0x00,
    614          0x00,0x42,0x22,0x13,0x0B,0x42,0x82,0x7E,0x02,0x02,0x0A,0x12,0x23,0x46,0x00,0x00,/*"系",0*/
    615          /* (16 X 16 , 宋体 )*/
    616          
    617          0x20,0x30,0xAC,0x63,0x30,0x00,0x88,0xC8,0xA8,0x99,0x8E,0x88,0xA8,0xC8,0x88,0x00,
    618          0x22,0x67,0x22,0x12,0x12,0x80,0x40,0x30,0x0F,0x00,0x00,0x3F,0x40,0x40,0x71,0x00,/*"统",1*/
    619          /* (16 X 16 , 宋体 )*/
    620          
    621          0x40,0x40,0x42,0xCC,0x00,0x00,0x00,0x84,0x84,0x84,0x84,0x84,0xFC,0x00,0x00,0x00,
    622          0x00,0x00,0x00,0x7F,0x20,0x10,0x00,0x3F,0x40,0x40,0x40,0x40,0x41,0x40,0x70,0x00,/*"记",0*/
    623          
    624          0x40,0x44,0x24,0xA4,0x94,0x8C,0x84,0xFF,0x84,0x8C,0x94,0xA4,0x24,0x44,0x40,0x00,
    625          0x40,0x40,0x40,0x5F,0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,0x5F,0x40,0x40,0x40,0x00,/*"查",2*/
    626          
    627          0x40,0x40,0x42,0xCC,0x00,0x20,0xD0,0x4C,0x4B,0x48,0xC8,0x08,0x08,0xF8,0x00,0x00,
    628          0x00,0x00,0x00,0x7F,0x20,0x10,0x1F,0x12,0x12,0x12,0x5F,0x80,0x40,0x3F,0x00,0x00,/*"询",3*/
    629          
    630          0x00,0x00,0xFE,0x12,0x12,0x12,0xF2,0x12,0x12,0x1E,0x00,0xF0,0x00,0x00,0xFF,0x00,
    631          0x10,0x0E,0x01,0x3F,0x01,0x01,0xFF,0x11,0x21,0x1F,0x00,0x0F,0x40,0x80,0x7F,0x00,/*"刷",0*/
    632          
    633          0x00,0xFE,0x20,0x20,0x3F,0x20,0x00,0xFC,0x24,0xE4,0x24,0x22,0x23,0xE2,0x00,0x00,
    634          0x80,0x7F,0x01,0x01,0xFF,0x80,0x60,0x1F,0x80,0x41,0x26,0x18,0x26,0x41,0x80,0x00,/*"版",0*/
    635          
    636          0x00,0x10,0x10,0x10,0x10,0xD0,0x30,0xFF,0x30,0xD0,0x10,0x10,0x10,0x10,0x00,0x00,
    637          0x10,0x08,0x04,0x02,0x09,0x08,0x08,0xFF,0x08,0x08,0x09,0x02,0x04,0x08,0x10,0x00,/*"本",1*/
    638          
    639          0x90,0x52,0x34,0x10,0xFF,0x10,0x34,0x52,0x80,0x70,0x8F,0x08,0x08,0xF8,0x08,0x00,
    640          0x82,0x9A,0x56,0x63,0x22,0x52,0x8E,0x00,0x80,0x40,0x33,0x0C,0x33,0x40,0x80,0x00,/*"数",0*/
    641          
    642          0x20,0x20,0x24,0x24,0x24,0x24,0xBF,0x64,0x24,0x34,0x28,0x24,0x22,0x20,0x20,0x00,
    643          0x10,0x08,0x04,0x02,0x3F,0x45,0x44,0x44,0x42,0x42,0x42,0x41,0x78,0x00,0x00,0x00,/*"老",0*/
    644          
    645          0x10,0x60,0x02,0x8C,0x00,0xFE,0x02,0xF2,0x02,0xFE,0x00,0xF8,0x00,0xFF,0x00,0x00,
    646          0x04,0x04,0x7E,0x01,0x80,0x47,0x30,0x0F,0x10,0x27,0x00,0x47,0x80,0x7F,0x00,0x00,/*"测",1*/
    647          
    648          0x40,0x40,0x42,0xCC,0x00,0x90,0x90,0x90,0x90,0x90,0xFF,0x10,0x11,0x16,0x10,0x00,
    649          0x00,0x00,0x00,0x3F,0x10,0x28,0x60,0x3F,0x10,0x10,0x01,0x0E,0x30,0x40,0xF0,0x00,/*"试",2*/
    650          
    651          0x10,0x10,0xD0,0xFF,0x90,0x14,0xE4,0xAF,0xA4,0xA4,0xA4,0xAF,0xE4,0x04,0x00,0x00,
    652          0x04,0x03,0x00,0xFF,0x00,0x89,0x4B,0x2A,0x1A,0x0E,0x1A,0x2A,0x4B,0x88,0x80,0x00,/*"模",0*/
    653          
    654          0x10,0x10,0x90,0x90,0x90,0x90,0x90,0x10,0x10,0xFF,0x10,0x10,0x11,0x16,0x10,0x00,
    655          0x00,0x20,0x60,0x20,0x3F,0x10,0x10,0x10,0x00,0x03,0x0C,0x10,0x20,0x40,0xF8,0x00,/*"式",1*/
    656          
    657          };
    658          //======================================================
    659          // 128X64OLED液晶底层驱动[8X16]字体库
    660          // 设计者: Guokaiyi
    661          // 描  述: [8X16]西文字符的字模数据 (纵向取模,字节倒序)
    662          // !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
    663          //======================================================
    664          const uchar F8X16[]=
    665          {
    666              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 0
    667              0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x33,0x30,0x00,0x00,0x00,//!1
    668              0x00,0x10,0x0C,0x06,0x10,0x0C,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//"2
    669              0x40,0xC0,0x78,0x40,0xC0,0x78,0x40,0x00,0x04,0x3F,0x04,0x04,0x3F,0x04,0x04,0x00,//#3
    670              0x00,0x70,0x88,0xFC,0x08,0x30,0x00,0x00,0x00,0x18,0x20,0xFF,0x21,0x1E,0x00,0x00,//$4
    671              0xF0,0x08,0xF0,0x00,0xE0,0x18,0x00,0x00,0x00,0x21,0x1C,0x03,0x1E,0x21,0x1E,0x00,//%5
    672              0x00,0xF0,0x08,0x88,0x70,0x00,0x00,0x00,0x1E,0x21,0x23,0x24,0x19,0x27,0x21,0x10,//&6
    673              0x10,0x16,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//'7
    674              0x00,0x00,0x00,0xE0,0x18,0x04,0x02,0x00,0x00,0x00,0x00,0x07,0x18,0x20,0x40,0x00,//(8
    675              0x00,0x02,0x04,0x18,0xE0,0x00,0x00,0x00,0x00,0x40,0x20,0x18,0x07,0x00,0x00,0x00,//)9
    676              0x40,0x40,0x80,0xF0,0x80,0x40,0x40,0x00,0x02,0x02,0x01,0x0F,0x01,0x02,0x02,0x00,//*10
    677              0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x1F,0x01,0x01,0x01,0x00,//+11
    678              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xB0,0x70,0x00,0x00,0x00,0x00,0x00,//,12
    679              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,//-13
    680              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00,//.14
    681              0x00,0x00,0x00,0x00,0x80,0x60,0x18,0x04,0x00,0x60,0x18,0x06,0x01,0x00,0x00,0x00,///15
    682              0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00,//016
    683              0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//117
    684              0x00,0x70,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00,//218
    685              0x00,0x30,0x08,0x88,0x88,0x48,0x30,0x00,0x00,0x18,0x20,0x20,0x20,0x11,0x0E,0x00,//319
    686              0x00,0x00,0xC0,0x20,0x10,0xF8,0x00,0x00,0x00,0x07,0x04,0x24,0x24,0x3F,0x24,0x00,//420
    687              0x00,0xF8,0x08,0x88,0x88,0x08,0x08,0x00,0x00,0x19,0x21,0x20,0x20,0x11,0x0E,0x00,//521
    688              0x00,0xE0,0x10,0x88,0x88,0x18,0x00,0x00,0x00,0x0F,0x11,0x20,0x20,0x11,0x0E,0x00,//622
    689              0x00,0x38,0x08,0x08,0xC8,0x38,0x08,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,//723
    690              0x00,0x70,0x88,0x08,0x08,0x88,0x70,0x00,0x00,0x1C,0x22,0x21,0x21,0x22,0x1C,0x00,//824
    691              0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x00,0x31,0x22,0x22,0x11,0x0F,0x00,//925
    692              0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,//:26
    693              0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x60,0x00,0x00,0x00,0x00,//;27
    694              0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x00,//<28
    695              0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x00,//=29
    696              0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x20,0x10,0x08,0x04,0x02,0x01,0x00,//>30
    697              0x00,0x70,0x48,0x08,0x08,0x08,0xF0,0x00,0x00,0x00,0x00,0x30,0x36,0x01,0x00,0x00,//?31
    698              0xC0,0x30,0xC8,0x28,0xE8,0x10,0xE0,0x00,0x07,0x18,0x27,0x24,0x23,0x14,0x0B,0x00,//@32
    699              0x00,0x00,0xC0,0x38,0xE0,0x00,0x00,0x00,0x20,0x3C,0x23,0x02,0x02,0x27,0x38,0x20,//A33
    700              0x08,0xF8,0x88,0x88,0x88,0x70,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x11,0x0E,0x00,//B34
    701              0xC0,0x30,0x08,0x08,0x08,0x08,0x38,0x00,0x07,0x18,0x20,0x20,0x20,0x10,0x08,0x00,//C35
    702              0x08,0xF8,0x08,0x08,0x08,0x10,0xE0,0x00,0x20,0x3F,0x20,0x20,0x20,0x10,0x0F,0x00,//D36
    703              0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x20,0x23,0x20,0x18,0x00,//E37
    704              0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x00,0x03,0x00,0x00,0x00,//F38
    705              0xC0,0x30,0x08,0x08,0x08,0x38,0x00,0x00,0x07,0x18,0x20,0x20,0x22,0x1E,0x02,0x00,//G39
    706              0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x20,0x3F,0x21,0x01,0x01,0x21,0x3F,0x20,//H40
    707              0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//I41
    708              0x00,0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,0x00,//J42
    709              0x08,0xF8,0x88,0xC0,0x28,0x18,0x08,0x00,0x20,0x3F,0x20,0x01,0x26,0x38,0x20,0x00,//K43
    710              0x08,0xF8,0x08,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x30,0x00,//L44
    711              0x08,0xF8,0xF8,0x00,0xF8,0xF8,0x08,0x00,0x20,0x3F,0x00,0x3F,0x00,0x3F,0x20,0x00,//M45
    712              0x08,0xF8,0x30,0xC0,0x00,0x08,0xF8,0x08,0x20,0x3F,0x20,0x00,0x07,0x18,0x3F,0x00,//N46
    713              0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x10,0x20,0x20,0x20,0x10,0x0F,0x00,//O47
    714              0x08,0xF8,0x08,0x08,0x08,0x08,0xF0,0x00,0x20,0x3F,0x21,0x01,0x01,0x01,0x00,0x00,//P48
    715              0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x18,0x24,0x24,0x38,0x50,0x4F,0x00,//Q49
    716              0x08,0xF8,0x88,0x88,0x88,0x88,0x70,0x00,0x20,0x3F,0x20,0x00,0x03,0x0C,0x30,0x20,//R50
    717              0x00,0x70,0x88,0x08,0x08,0x08,0x38,0x00,0x00,0x38,0x20,0x21,0x21,0x22,0x1C,0x00,//S51
    718              0x18,0x08,0x08,0xF8,0x08,0x08,0x18,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//T52
    719              0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//U53
    720              0x08,0x78,0x88,0x00,0x00,0xC8,0x38,0x08,0x00,0x00,0x07,0x38,0x0E,0x01,0x00,0x00,//V54
    721              0xF8,0x08,0x00,0xF8,0x00,0x08,0xF8,0x00,0x03,0x3C,0x07,0x00,0x07,0x3C,0x03,0x00,//W55
    722              0x08,0x18,0x68,0x80,0x80,0x68,0x18,0x08,0x20,0x30,0x2C,0x03,0x03,0x2C,0x30,0x20,//X56
    723              0x08,0x38,0xC8,0x00,0xC8,0x38,0x08,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//Y57
    724              0x10,0x08,0x08,0x08,0xC8,0x38,0x08,0x00,0x20,0x38,0x26,0x21,0x20,0x20,0x18,0x00,//Z58
    725              0x00,0x00,0x00,0xFE,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x7F,0x40,0x40,0x40,0x00,//[59
    726              0x00,0x0C,0x30,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x38,0xC0,0x00,//\60
    727              0x00,0x02,0x02,0x02,0xFE,0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x7F,0x00,0x00,0x00,//]61
    728              0x00,0x00,0x04,0x02,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//^62
    729              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,//_63
    730              0x00,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//`64
    731              0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x19,0x24,0x22,0x22,0x22,0x3F,0x20,//a65
    732              0x08,0xF8,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x3F,0x11,0x20,0x20,0x11,0x0E,0x00,//b66
    733              0x00,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x0E,0x11,0x20,0x20,0x20,0x11,0x00,//c67
    734              0x00,0x00,0x00,0x80,0x80,0x88,0xF8,0x00,0x00,0x0E,0x11,0x20,0x20,0x10,0x3F,0x20,//d68
    735              0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x22,0x13,0x00,//e69
    736              0x00,0x80,0x80,0xF0,0x88,0x88,0x88,0x18,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//f70
    737              0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x6B,0x94,0x94,0x94,0x93,0x60,0x00,//g71
    738              0x08,0xF8,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//h72
    739              0x00,0x80,0x98,0x98,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//i73
    740              0x00,0x00,0x00,0x80,0x98,0x98,0x00,0x00,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,//j74
    741              0x08,0xF8,0x00,0x00,0x80,0x80,0x80,0x00,0x20,0x3F,0x24,0x02,0x2D,0x30,0x20,0x00,//k75
    742              0x00,0x08,0x08,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//l76
    743              0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x20,0x3F,0x20,0x00,0x3F,0x20,0x00,0x3F,//m77
    744              0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//n78
    745              0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//o79
    746              0x80,0x80,0x00,0x80,0x80,0x00,0x00,0x00,0x80,0xFF,0xA1,0x20,0x20,0x11,0x0E,0x00,//p80
    747              0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x0E,0x11,0x20,0x20,0xA0,0xFF,0x80,//q81
    748              0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x20,0x20,0x3F,0x21,0x20,0x00,0x01,0x00,//r82
    749              0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x33,0x24,0x24,0x24,0x24,0x19,0x00,//s83
    750              0x00,0x80,0x80,0xE0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x1F,0x20,0x20,0x00,0x00,//t84
    751              0x80,0x80,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x1F,0x20,0x20,0x20,0x10,0x3F,0x20,//u85
    752              0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x00,0x01,0x0E,0x30,0x08,0x06,0x01,0x00,//v86
    753              0x80,0x80,0x00,0x80,0x00,0x80,0x80,0x80,0x0F,0x30,0x0C,0x03,0x0C,0x30,0x0F,0x00,//w87
    754              0x00,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x31,0x2E,0x0E,0x31,0x20,0x00,//x88
    755              0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x80,0x81,0x8E,0x70,0x18,0x06,0x01,0x00,//y89
    756              0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x21,0x30,0x2C,0x22,0x21,0x30,0x00,//z90
    757              0x00,0x00,0x00,0x00,0x80,0x7C,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x3F,0x40,0x40,//{91
    758              0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,//|92
    759              0x00,0x02,0x02,0x7C,0x80,0x00,0x00,0x00,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x00,//}93
    760              0x00,0x06,0x01,0x01,0x02,0x02,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//~94
    761          };
    762          
    763          const uchar F16X32[]=
    764          {
    765          
    766          0x00,
    767          	
    768          };
    769          
    770          
    771          const uchar F24x24[] =
    772          {
    773          0x00,
    774          
    775            
    776            
    777          };
    778          
    779          
    780          
    781          /*----------------------------------------------------------------------------*
    782           * 内部函数原型                                                               *
    783           *----------------------------------------------------------------------------*/
    784          void LED_WrDat(uchar ucData);
    785          void LED_WrCmd(uchar ucCmd);
    786          void LED_SetPos(uchar ucIdxX, uchar ucIdxY);
    787          void SetStartColumn(uchar ucData);
    788          void SetAddressingMode(uchar ucData);
    789          void SetColumnAddress(uchar a, uchar b);
    790          void SetPageAddress(uchar a, uchar b);
    791          void SetStartLine(uchar d);
    792          void SetContrastControl(uchar d);
    793          void SetChargePump(uchar d);
    794          void SetSegmentRemap(uchar d);
    795          void SetEntireDisplay(uchar d);
    796          void SetInverseDisplay(uchar d);
    797          void SetMultiplexRatio(uchar d);
    798          void SetDisplayOnOff(uchar d);
    799          void SetStartPage(uchar d);
    800          void SetCommonRemap(uchar d);
    801          void SetDisplayOffset(uchar d);
    802          void SetDisplayClock(uchar d);
    803          void SetPrechargePeriod(uchar d);
    804          void SetCommonConfig(uchar d);
    805          void SetVCOMH(uchar d);
    806          void SetNop(void);
    807          
    808          /*----------------------------------------------------------------------------*
    809           * 外部函数原型                                                               *
    810           *----------------------------------------------------------------------------*/
    811          
    812          /*****************************************************************************
    813           函 数 名  : LED_WrDat
    814           功能描述  : 向OLED写数据
    815           输入参数  : uchar ucData  
    816           输出参数  : NONE
    817           返 回 值  : NONE
    818          *****************************************************************************/
    819          void LED_WrDat(uchar ucData)
    820          {
    821              uchar i=8;
    822              Dc=1;
    823              Scl=0;
    824              
    825              while (i--)
    826              {
    827                  if (ucData & 0x80)
    828                  {
    829                      Sda=1;
    830                  }
    831                  else
    832                  {
    833                      Sda=0;
    834                  }
    835                  
    836                  Scl=1; 
    837                  //delay(10);
    838                  Scl=0;    
    839                  ucData <<= 1;    
    840              }
    841          
    842              return;
    843          }
    844          
    845          /*****************************************************************************
    846           函 数 名  : LED_WrCmd
    847           功能描述  : 向OLED写命令
    848           输入参数  : uchar ucCmd  
    849           输出参数  : NONE
    850           返 回 值  : NONE
    851          *****************************************************************************/
    852          void LED_WrCmd(uchar ucCmd)
    853          {
    854              uchar i = 8;
    855              Dc=0;
    856              Scl=0;
    857              while (i--)
    858              {
    859                  if (ucCmd & 0x80)
    860                  {
    861                      Sda=1;
    862                  }
    863                  else
    864                  {
    865                      Sda=0;
    866                  }
    867                  Scl=1;
    868                  //delay(10);           
    869                  Scl=0;    
    870                  ucCmd <<= 1;   
    871              }  
    872          
    873              return;
    874          }
    875          
    876          
    877          /*****************************************************************************
    878           函 数 名  : LED_SetPos
    879           功能描述  : 设置坐标
    880           输入参数  : uchar ucIdxX  
    881                       uchar ucIdxY  
    882           输出参数  : NONE
    883           返 回 值  : NONE
    884          *****************************************************************************/
    885          void LED_SetPos(uchar ucIdxX, uchar ucIdxY)
    886          { 
    887              LED_WrCmd(0xb0 + ucIdxY);
    888              LED_WrCmd(((ucIdxX & 0xf0) >> 4) | 0x10);
    889              LED_WrCmd((ucIdxX & 0x0f) | 0x00); 
    890          } 
    891          
    892          /*****************************************************************************
    893           函 数 名  : LED_Fill
    894           功能描述  : 对全屏写入同一个字符函数 
    895                       如 LED_Fill(0x01);    对于某一位0为不亮 1为亮
    896                      ------------------------------------------------------
    897                                          共128列
    898                            1           1                1
    899                        共  0           0                0
    900                        8   0           0                0
    901                        组  0       ……0     …………   0
    902                        字  0           0                0
    903                        符  0           0                0
    904                        即  0           0                0
    905                        8   0           0                0
    906                        页  1           1                1
    907                        64  0           0                0
    908                        行  .           .                .
    909                            .           .    …………    .
    910                            .           .                . 
    911                            .           .                .
    912                            0           0                0
    913                      ------------------------------------------------------
    914           输入参数  : uchar ucData  
    915           输出参数  : NONE
    916           返 回 值  : NONE
    917          *****************************************************************************/
    918          void LED_Fill(uchar ucData)
    919          {
    920              uchar ucPage,ucColumn;
    921              
    922              for(ucPage = 0; ucPage < 8; ucPage++)
    923              {
    924                  LED_WrCmd(0xb0 + ucPage);  //0xb0+0~7表示页0~7
    925                  LED_WrCmd(0x00);           //0x00+0~16表示将128列分成16组其地址在某组中的第几列
    926                  LED_WrCmd(0x10);           //0x10+0~16表示将128列分成16组其地址所在第几组
    927                  for(ucColumn = 0; ucColumn < 128; ucColumn++)
    928                  {
    929                      LED_WrDat(ucData);
    930                  }
    931              }
    932          } 
    933          
    934          void LED_Fill_Area(uchar x,uchar y,uchar ucData)
    935          {
    936              uchar ucPage,ucColumn;
    937              for(ucPage = x; ucPage < y; ucPage++)
    938              {
    939                  LED_WrCmd(0xb0 + ucPage);  //0xb0+0~7表示页0~7
    940                  LED_WrCmd(0x00);           //0x00+0~16表示将128列分成16组其地址在某组中的第几列
    941                  LED_WrCmd(0x10);           //0x10+0~16表示将128列分成16组其地址所在第几组
    942                  for(ucColumn = 0; ucColumn < 128; ucColumn++)
    943                  {
    944                      LED_WrDat(ucData);
    945                  }
    946              }
    947          } 
    948          
    949          void BMP(uchar p[])
    950          {
    951              uchar ucPage,ucColumn;
    952          		uint x=0;
    953              for(ucPage = 0; ucPage < 8; ucPage++)
    954              {
    955                  LED_WrCmd(0xb0 + ucPage);  //0xb0+0~7表示页0~7
    956                  LED_WrCmd(0x00);           //0x00+0~16表示将128列分成16组其地址在某组中的第几列
    957                  LED_WrCmd(0x10);           //0x10+0~16表示将128列分成16组其地址所在第几组
    958                  for(ucColumn = 0; ucColumn < 128; ucColumn++)
    959                  {
    960                      LED_WrDat(p[x++]);
    961                  }
    962              }
    963          } 
    964          
    965          void SetStartColumn(uchar ucData)
    966          {
    967              LED_WrCmd(0x00+ucData % 16);   // Set Lower Column Start Address for Page Addressing Mode
    968                                             // Default => 0x00
    969              LED_WrCmd(0x10+ucData / 16);   // Set Higher Column Start Address for Page Addressing Mode
    970                                             // Default => 0x10
    971          }
    972          
    973          void SetAddressingMode(uchar ucData)
    974          {
    975              LED_WrCmd(0x20);        // Set Memory Addressing Mode
    976              LED_WrCmd(ucData);      // Default => 0x02
    977                                      // 0x00 => Horizontal Addressing Mode
    978                                      // 0x01 => Vertical Addressing Mode
    979                                      // 0x02 => Page Addressing Mode
    980          }
    981          
    982          void SetColumnAddress(uchar a, uchar b)
    983          {
    984              LED_WrCmd(0x21);        // Set Column Address
    985              LED_WrCmd(a);           // Default => 0x00 (Column Start Address)
    986              LED_WrCmd(b);           // Default => 0x7F (Column End Address)
    987          }
    988          
    989          void SetPageAddress(uchar a, uchar b)
    990          {
    991              LED_WrCmd(0x22);        // Set Page Address
    992              LED_WrCmd(a);           // Default => 0x00 (Page Start Address)
    993              LED_WrCmd(b);           // Default => 0x07 (Page End Address)
    994          }
    995          
    996          void SetStartLine(uchar ucData)
    997          {
    998              LED_WrCmd(0x40|ucData); // Set Display Start Line
    999                                      // Default => 0x40 (0x00)
   1000          }
   1001          
   1002          void SetContrastControl(uchar ucData)
   1003          {
   1004              LED_WrCmd(0x81);        // Set Contrast Control
   1005              LED_WrCmd(ucData);      // Default => 0x7F
   1006          }
   1007          
   1008          void SetChargePump(uchar ucData)
   1009          {
   1010              LED_WrCmd(0x8D);        // Set Charge Pump
   1011              LED_WrCmd(0x10|ucData); // Default => 0x10
   1012                                      // 0x10 (0x00) => Disable Charge Pump
   1013                                      // 0x14 (0x04) => Enable Charge Pump
   1014          }
   1015          
   1016          void SetSegmentRemap(uchar ucData)
   1017          {
   1018              LED_WrCmd(0xA0|ucData); // Set Segment Re-Map
   1019                                      // Default => 0xA0
   1020                                      // 0xA0 (0x00) => Column Address 0 Mapped to SEG0
   1021                                      // 0xA1 (0x01) => Column Address 0 Mapped to SEG127
   1022          }
   1023          
   1024          void SetEntireDisplay(uchar ucData)
   1025          {
   1026              LED_WrCmd(0xA4|ucData); // Set Entire Display On / Off
   1027                                      // Default => 0xA4
   1028                                      // 0xA4 (0x00) => Normal Display
   1029                                      // 0xA5 (0x01) => Entire Display On
   1030          }
   1031          
   1032          void SetInverseDisplay(uchar ucData)
   1033          {
   1034              LED_WrCmd(0xA6|ucData); // Set Inverse Display On/Off
   1035                                      // Default => 0xA6
   1036                                      // 0xA6 (0x00) => Normal Display
   1037                                      // 0xA7 (0x01) => Inverse Display On
   1038          }
   1039          
   1040          void SetMultiplexRatio(uchar ucData)
   1041          {
   1042              LED_WrCmd(0xA8);        // Set Multiplex Ratio
   1043              LED_WrCmd(ucData);      // Default => 0x3F (1/64 Duty)
   1044          }
   1045          
   1046          void SetDisplayOnOff(uchar ucData)
   1047          {
   1048              LED_WrCmd(0xAE|ucData); // Set Display On/Off
   1049                                      // Default => 0xAE
   1050                                      // 0xAE (0x00) => Display Off
   1051                                      // 0xAF (0x01) => Display On
   1052          }
   1053          
   1054          void SetStartPage(uchar ucData)
   1055          {
   1056              LED_WrCmd(0xB0|ucData); // Set Page Start Address for Page Addressing Mode
   1057                                      // Default => 0xB0 (0x00)
   1058          }
   1059          
   1060          void SetCommonRemap(uchar ucData)
   1061          {
   1062              LED_WrCmd(0xC0|ucData); // Set COM Output Scan Direction
   1063                                      // Default => 0xC0
   1064                                      // 0xC0 (0x00) => Scan from COM0 to 63
   1065                                      // 0xC8 (0x08) => Scan from COM63 to 0
   1066          }
   1067          
   1068          void SetDisplayOffset(uchar ucData)
   1069          {
   1070              LED_WrCmd(0xD3);        // Set Display Offset
   1071              LED_WrCmd(ucData);      // Default => 0x00
   1072          }
   1073          
   1074          void SetDisplayClock(uchar ucData)
   1075          {
   1076              LED_WrCmd(0xD5);        // Set Display Clock Divide Ratio / Oscillator Frequency
   1077              LED_WrCmd(ucData);      // Default => 0x80
   1078                                      // D[3:0] => Display Clock Divider
   1079                                      // D[7:4] => Oscillator Frequency
   1080          }
   1081          
   1082          void SetPrechargePeriod(uchar ucData)
   1083          {
   1084              LED_WrCmd(0xD9);        // Set Pre-Charge Period
   1085              LED_WrCmd(ucData);      // Default => 0x22 (2 Display Clocks [Phase 2] / 2 Display Clocks [Phase 1])
   1086                                      // D[3:0] => Phase 1 Period in 1~15 Display Clocks
   1087                                      // D[7:4] => Phase 2 Period in 1~15 Display Clocks
   1088          }
   1089          
   1090          void SetCommonConfig(uchar ucData)
   1091          {
   1092              LED_WrCmd(0xDA);        // Set COM Pins Hardware Configuration
   1093              LED_WrCmd(0x02|ucData); // Default => 0x12 (0x10)
   1094                                      // Alternative COM Pin Configuration
   1095                                      // Disable COM Left/Right Re-Map
   1096          }
   1097          
   1098          void SetVCOMH(uchar ucData)
   1099          {
   1100              LED_WrCmd(0xDB);        // Set VCOMH Deselect Level
   1101              LED_WrCmd(ucData);      // Default => 0x20 (0.77*VCC)
   1102          }
   1103          
   1104          void SetNop(void)
   1105          {
   1106              LED_WrCmd(0xE3);        // Command for No Operation
   1107          }
   1108          
   1109          /*****************************************************************************
   1110           函 数 名  : LED_Init
   1111           功能描述  : OLED初始化
   1112           输入参数  : void  
   1113           输出参数  : NONE
   1114           返 回 值  : NONE
   1115          *****************************************************************************/
   1116          void OLED_Init(void)        
   1117          {
   1118              //uchar i;
   1119              OLEDIO_Init();
   1120              Scl=1;      
   1121              Rst=0;
   1122              delay(100);
   1123              Rst=1;
   1124              SetDisplayOnOff(0x00);     // Display Off (0x00/0x01)
   1125              SetDisplayClock(0xf0);     // Set Clock as 100 Frames/Sec
   1126              SetMultiplexRatio(0x3f);   // 1/64 Duty (0x0F~0x3F)
   1127              SetDisplayOffset(0x00);    // Shift Mapping RAM Counter (0x00~0x3F)
   1128              SetStartLine(0x00);        // Set Mapping RAM Display Start Line (0x00~0x3F)
   1129              SetChargePump(0x04);       // Enable Embedded DC/DC Converter (0x00/0x04)
   1130              SetAddressingMode(0x02);   // Set Page Addressing Mode (0x00/0x01/0x02)
   1131              SetSegmentRemap(0x00);     // Set SEG/Column Mapping     0x00左右反置 0x01正常
   1132              SetCommonRemap(0x00);      // Set COM/Row Scan Direction 0x00上下反置 0x08正常
   1133              SetCommonConfig(0x10);     // Set Sequential Configuration (0x00/0x10)
   1134              SetContrastControl(0xff);  // Set SEG Output Current
   1135              SetPrechargePeriod(0xF1);  // Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
   1136              SetVCOMH(0x40);            // Set VCOM Deselect Level
   1137              SetEntireDisplay(0x00);    // Disable Entire Display On (0x00/0x01)
   1138              SetInverseDisplay(0x00);   // Disable Inverse Display On (0x00/0x01)  
   1139              SetDisplayOnOff(0x01);     // Display On (0x00/0x01)
   1140              LED_Fill(0x00);            // 初始清屏
   1141              LED_SetPos(0,0);
   1142              return;
   1143          } 
   1144           
   1145          /*****************************************************************************
   1146           函 数 名  : LED_P6x8Char
   1147           功能描述  : 显示一个6x8标准ASCII字符
   1148           输入参数  : uchar ucIdxX  显示的横坐标0~122
   1149                       uchar ucIdxY  页范围0～7
   1150                       uchar ucData  显示的字符
   1151           输出参数  : NONE
   1152           返 回 值  : NONE
   1153          *****************************************************************************/
   1154          unsigned char NegDis;
   1155          void LED_P6x8Char(unsigned char ucIdxX, unsigned char ucIdxY, unsigned char ucData)
   1156          {
   1157            /*
   1158            
   1159              uchar i, ucDataTmp;     
   1160                 
   1161              ucDataTmp = ucData-32;
   1162              if(ucIdxX > 122)
   1163              {
   1164                  ucIdxX = 0;
   1165                  ucIdxY++;
   1166              }
   1167              
   1168              LED_SetPos(ucIdxX, ucIdxY);
   1169              
   1170              for(i = 0; i < 6; i++)
   1171              {     
   1172                  if(NegDis) LED_WrDat(0);
   1173          				else LED_WrDat(F6x8[ucDataTmp][i]);
   1174          				//LED_WrDat(F6x8[ucDataTmp][i]);  
   1175              }
   1176            
   1177            */
   1178          }
   1179          
   1180          
   1181          /*****************************************************************************
   1182           函 数 名  : LED_P6x8Str
   1183           功能描述  : 显示电池电量
   1184           输入参数  : uchar ucIdxX       显示的横坐标0~122
   1185                       uchar ucIdxY       页范围0～7
   1186                       uchar NO           显示电量格数
   1187           输出参数  : NONE
   1188           返 回 值  : NONE
   1189          *****************************************************************************/
   1190          void LED_P6x8Str(uchar ucIdxX, uchar ucIdxY, uchar NO)
   1191          {
   1192              uchar i, ucDataTmp=NO*32;
   1193              ucIdxY <<= 1;
   1194          	
   1195                  
   1196                  
   1197                  LED_SetPos(ucIdxX, ucIdxY);   
   1198                  
   1199                  for(i = 0; i < 16; i++) 
   1200                  {
   1201                    LED_WrDat(F6x8[ucDataTmp]);
   1202                    ucDataTmp++;
   1203                  }
   1204                  
   1205                  LED_SetPos(ucIdxX, ucIdxY + 1);   
   1206                  
   1207                  for(i = 0; i < 16; i++) 
   1208                  {
   1209                    LED_WrDat(F6x8[ucDataTmp]);
   1210                    ucDataTmp++;
   1211                  }
   1212                  //ucIdxX += 8;
   1213                  
   1214              
   1215          
   1216              return;
   1217          
   1218          }
   1219          /*****************************************************************************
   1220           函 数 名  : LED_P6x8Char
   1221           功能描述  : 显示一个8x16标准ASCII字符
   1222           输入参数  : uchar ucIdxX  显示的横坐标0~122
   1223                       uchar ucIdxY  页范围0～7
   1224                       uchar ucData  显示的字符
   1225           输出参数  : NONE
   1226           返 回 值  : NONE
   1227          *****************************************************************************/
   1228          void LED_P8x16Char(unsigned char ucIdxX, unsigned char ucIdxY, unsigned char ucData)
   1229          {
   1230              uchar i, ucDataTmp;
   1231              //temp=ucIdxY;
   1232              ucIdxY <<= 1;
   1233              //for (j = 0; ucDataStr[temp][j] != '\0'; j++)
   1234          		
   1235                 
   1236                  ucDataTmp = ucData - 32;
   1237                  
   1238                  if(ucIdxX > 120)
   1239                  {
   1240                      ucIdxX = 0;
   1241                      ucIdxY += 2;
   1242                  }
   1243                  
   1244                  LED_SetPos(ucIdxX, ucIdxY);   
   1245                  
   1246                  for(i = 0; i < 8; i++) 
   1247                  {
   1248                    LED_WrDat(F8X16[(ucDataTmp << 4) + i]);
   1249                     //if(temp!=NegDis_) LED_WrDat(F8X16[(ucDataTmp << 4) + i]);
   1250          					 //LED_WrDat(~F8X16[(ucDataTmp << 4) + i]);
   1251                  }
   1252                  
   1253                  LED_SetPos(ucIdxX, ucIdxY + 1);   
   1254                  
   1255                  for(i = 0; i < 8; i++) 
   1256                  {
   1257                    LED_WrDat(F8X16[(ucDataTmp << 4) + i + 8]);
   1258                      //if(temp!=NegDis_) LED_WrDat(F8X16[(ucDataTmp << 4) + i + 8]);
   1259          						//LED_WrDat(~F8X16[(ucDataTmp << 4) + i + 8]);
   1260                  }
   1261                  ucIdxX += 8;
   1262                  
   1263              
   1264          
   1265              return;
   1266          }
   1267          /*****************************************************************************
   1268           函 数 名  : LED_P6x8Char
   1269           功能描述  : 显示一个16x32标准ASCII字符
   1270           输入参数  : uchar ucIdxX  显示的横坐标0~122
   1271                       uchar ucIdxY  页范围0～7
   1272                       uchar ucData  显示的字符
   1273           输出参数  : NONE
   1274           返 回 值  : NONE
   1275          *****************************************************************************/
   1276          void LED_P16x32Char(unsigned char ucIdxX, unsigned char ucIdxY, unsigned char ucData)
   1277          {
   1278              uchar i;
   1279          		long int ucDataTmp;
   1280              //temp=ucIdxY;
   1281              ucIdxY <<= 1;
   1282              //for (j = 0; ucDataStr[temp][j] != '\0'; j++)
   1283          		
   1284                 
   1285                  ucDataTmp = (ucData-48)*64;
   1286          				
   1287                  if(ucIdxX > 112)
   1288                  {
   1289                      ucIdxX = 0;
   1290                      ucIdxY += 4;
   1291                  }
   1292                  
   1293          				LED_SetPos(ucIdxX, ucIdxY);   
   1294                  
   1295                  for(i = 0; i < 16; i++) 
   1296                  {
   1297                    LED_WrDat(F16X32[(ucDataTmp<<0) + i]);//8*0-8*8
   1298                  }
   1299          				
   1300          				LED_SetPos(ucIdxX, ucIdxY+1);   
   1301                  
   1302                  for(i = 0; i < 16; i++) 
   1303                  {
   1304                    LED_WrDat(F16X32[(ucDataTmp<<0) + i+16]);//8*2-8*10
   1305                  }
   1306          				
   1307          				LED_SetPos(ucIdxX, ucIdxY+2);   
   1308                  
   1309                  for(i = 0; i < 16; i++) 
   1310                  {
   1311                    LED_WrDat(F16X32[(ucDataTmp<<0) + i+32]);//8*4-8*12
   1312                  }
   1313          				
   1314          				LED_SetPos(ucIdxX, ucIdxY+3);   
   1315                  
   1316                  for(i = 0; i < 16; i++) 
   1317                  {
   1318                    LED_WrDat(F16X32[(ucDataTmp<<0) + i+48]);//8*6-8*14
   1319                  }
   1320              
   1321          
   1322              return;
   1323          }
   1324          /*****************************************************************************
   1325           函 数 名  : LED_P8x16Str
   1326           功能描述  : 写入一组8x16标准ASCII字符串
   1327           输入参数  : uchar ucIdxX       为显示的横坐标0~120
   1328                       uchar ucIdxY       为页范围0～3
   1329                       uchar ucDataStr[]  要显示的字符串
   1330           输出参数  : NONE
   1331           返 回 值  : NONE
   1332          *****************************************************************************/
   1333          void LED_P8x16Str(uchar ucIdxX, uchar ucIdxY,uchar ucDataStr[],uchar NegDis_,uchar FlashDis_)
   1334          {
   1335              uchar i, j, ucDataTmp,temp;
   1336          		temp=ucIdxY;
   1337              ucIdxY <<= 1;
   1338              //for (j = 0; ucDataStr[temp][j] != '\0'; j++)
   1339          		for (j = 0; j<16; j++)
   1340              {    
   1341                  ucDataTmp = ucDataStr[j] - 32;
   1342                  
   1343                  if(ucIdxX > 120)
   1344                  {
   1345                      ucIdxX = 0;
   1346                      ucIdxY += 2;
   1347                  }
   1348                  
   1349                  LED_SetPos(ucIdxX, ucIdxY);   
   1350                  
   1351                  for(i = 0; i < 8; i++) 
   1352                  {
   1353                     if(temp!=NegDis_) LED_WrDat(F8X16[(ucDataTmp << 4) + i]);
   1354          					 else LED_WrDat(~F8X16[(ucDataTmp << 4) + i]);
   1355                  }
   1356                  
   1357                  LED_SetPos(ucIdxX, ucIdxY + 1);   
   1358                  
   1359                  for(i = 0; i < 8; i++) 
   1360                  {
   1361                      if(temp!=NegDis_) LED_WrDat(F8X16[(ucDataTmp << 4) + i + 8]);
   1362          						else LED_WrDat(~F8X16[(ucDataTmp << 4) + i + 8]);
   1363                  }
   1364                  ucIdxX += 8;
   1365                  
   1366              }
   1367          
   1368              return;
   1369          }
   1370          
   1371          /*****************************************************************************
   1372           函 数 名  : LED_P14x16Str
   1373           功能描述  : 写入一组14x16的中文字符串（字符串表格中需含有此字）
   1374           输入参数  : uchar ucIdxX       为显示的横坐标0~114
   1375                       uchar ucIdxY       为页范围0～3
   1376                       uchar ucDataStr[]  要显示的中文字符串
   1377           输出参数  : NONE
   1378           返 回 值  : NONE
   1379          *****************************************************************************/
   1380          /*
   1381          void LED_P14x16Str(uchar ucIdxX,uchar ucIdxY,uchar ucDataStr[])
   1382          {
   1383              uchar i, j;
   1384              uint usAddress; 
   1385              
   1386              ucIdxY <<= 1;
   1387              
   1388              j = 0;
   1389              while(ucDataStr[j] != '\0')
   1390              {
   1391                  i = 0;
   1392                  usAddress = 1;
   1393                  while(F14x16_Idx[i] > 127)
   1394                  {
   1395                      if(F14x16_Idx[i] == ucDataStr[j])
   1396                      {
   1397                          if(F14x16_Idx[i + 1] == ucDataStr[j + 1])
   1398                          {
   1399                              usAddress = i * 14;
   1400                              break;
   1401                          }
   1402                      }
   1403                      i += 2;            
   1404                  }
   1405                  
   1406                  if(ucIdxX > 114)
   1407                  {
   1408                      ucIdxX = 0;
   1409                      ucIdxY += 2;
   1410                  }
   1411                  
   1412                  if(usAddress != 1)// 显示汉字                   
   1413                  {
   1414                      LED_SetPos(ucIdxX, ucIdxY);
   1415                      for(i = 0; i < 14; i++)               
   1416                      {
   1417                          LED_WrDat(F14x16[usAddress]);   
   1418                          usAddress++;
   1419                      }
   1420                      
   1421                      LED_SetPos(ucIdxX,ucIdxY + 1); 
   1422                      for(i = 0;i < 14;i++)          
   1423                      {
   1424                          LED_WrDat(F14x16[usAddress]);
   1425                          usAddress++;
   1426                      }
   1427                      
   1428                      j += 2;        
   1429                  }
   1430                  else              //显示空白字符            
   1431                  {
   1432                      LED_SetPos(ucIdxX,ucIdxY);
   1433                      for(i = 0;i < 14;i++)
   1434                      {
   1435                          LED_WrDat(0);
   1436                      }
   1437                      
   1438                      LED_SetPos(ucIdxX,ucIdxY + 1);
   1439                      for(i = 0;i < 14;i++)
   1440                      {           
   1441                          LED_WrDat(0);   
   1442                      }
   1443                      
   1444                      j++;
   1445                  }
   1446                  
   1447                  ucIdxX += 14;
   1448              }
   1449          
   1450              return;
   1451          }
   1452          */
   1453          /*****************************************************************************
   1454           函 数 名  : LED_P16x16Str
   1455           功能描述  : 写入一组14x16的中文字符串（字符串表格中需含有此字）
   1456           输入参数  : uchar ucIdxX       为显示的横坐标0~114
   1457                       uchar ucIdxY       为页范围0～3
   1458                       uchar ucDataStr[]  要显示的中文字符串
   1459           输出参数  : NONE
   1460           返 回 值  : NONE
   1461          *****************************************************************************/
   1462          
   1463          void LED_P16x16Str(uchar ucIdxX,uchar ucIdxY,uchar ucDataStr[])
   1464          {
   1465              uchar i, j;
   1466              uint usAddress; 
   1467              
   1468              ucIdxY <<= 1;
   1469              
   1470              j = 0;
   1471              while(ucDataStr[j] != '\0')
   1472              {
   1473                  i = 0;
   1474                  usAddress = 1;
   1475                  while(F16x16_Idx[i] > 127)
   1476                  {
   1477                      if(F16x16_Idx[i] == ucDataStr[j])
   1478                      {
   1479                          if(F16x16_Idx[i + 1] == ucDataStr[j + 1])
   1480                          {
   1481                              usAddress = i * 16;
   1482                              break;
   1483                          }
   1484                      }
   1485                      i += 2;            
   1486                  }
   1487                  
   1488                  if(ucIdxX > 114)
   1489                  {
   1490                      ucIdxX = 0;
   1491                      ucIdxY += 2;
   1492                  }
   1493                  
   1494                  if(usAddress != 1)// 显示汉字                   
   1495                  {
   1496                      LED_SetPos(ucIdxX, ucIdxY);
   1497                      for(i = 0; i < 16; i++)               
   1498                      {
   1499                          LED_WrDat(F16x16[usAddress]);   
   1500                          usAddress++;
   1501                      }
   1502                      
   1503                      LED_SetPos(ucIdxX,ucIdxY + 1); 
   1504                      for(i = 0;i < 16;i++)          
   1505                      {
   1506                          LED_WrDat(F16x16[usAddress]);
   1507                          usAddress++;
   1508                      }
   1509                      
   1510                      j += 2;        
   1511                  }
   1512                  else              //显示空白字符            
   1513                  {
   1514                      LED_SetPos(ucIdxX,ucIdxY);
   1515                      for(i = 0;i < 16;i++)
   1516                      {
   1517                          LED_WrDat(0);
   1518                      }
   1519                      
   1520                      LED_SetPos(ucIdxX,ucIdxY + 1);
   1521                      for(i = 0;i < 16;i++)
   1522                      {           
   1523                          LED_WrDat(0);   
   1524                      }
   1525                      
   1526                      j++;
   1527                  }
   1528                  
   1529                  ucIdxX += 16;
   1530              }
   1531          
   1532              return;
   1533          }
   1534          
   1535          /*****************************************************************************
   1536           函 数 名  : LED_P16x16Str
   1537           功能描述  : 写入一组14x16的中文字符串（字符串表格中需含有此字）
   1538           输入参数  : uchar ucIdxX       为显示的横坐标0~114
   1539                       uchar ucIdxY       为页范围0～3
   1540                       uchar ucDataStr[]  要显示的中文字符串
   1541           输出参数  : NONE
   1542           返 回 值  : NONE
   1543          *****************************************************************************/
   1544          
   1545          void LED_P24x24Str(uchar ucIdxX,uchar ucIdxY,uchar ucDataStr[])
   1546          {
   1547              uchar i, j;
   1548              uint usAddress; 
   1549              
   1550              ucIdxY <<= 1;
   1551              
   1552              j = 0;
   1553              while(ucDataStr[j] != '\0')
   1554              {
   1555                  i = 0;
   1556                  usAddress = 1;
   1557                  while(F24x24_Idx[i] > 127)
   1558                  {
   1559                      if(F24x24_Idx[i] == ucDataStr[j])
   1560                      {
   1561                          if(F24x24_Idx[i + 1] == ucDataStr[j + 1])
   1562                          {
   1563                              usAddress = i * 36;
   1564                              break;
   1565                          }
   1566                      }
   1567                      i += 2;            //i为字符间的间距，24*24为2*36=72
   1568                  }
   1569                  
   1570                  if(ucIdxX > 114)
   1571                  {
   1572                      ucIdxX = 0;
   1573                      ucIdxY += 2;
   1574                  }
   1575                  
   1576                  if(usAddress != 1)// 显示汉字                   
   1577                  {
   1578                      LED_SetPos(ucIdxX, ucIdxY);
   1579                      for(i = 0; i < 24; i++)               
   1580                      {
   1581                          LED_WrDat(F24x24[usAddress]);   
   1582                          usAddress++;
   1583                      }
   1584                      
   1585                      LED_SetPos(ucIdxX,ucIdxY + 1); 
   1586                      for(i = 0;i < 24;i++)          
   1587                      {
   1588                          LED_WrDat(F24x24[usAddress]);
   1589                          usAddress++;
   1590                      }
   1591                      
   1592                      LED_SetPos(ucIdxX,ucIdxY + 2); 
   1593                      for(i = 0;i < 24;i++)          
   1594                      {
   1595                          LED_WrDat(F24x24[usAddress]);
   1596                          usAddress++;
   1597                      }
   1598                      
   1599                      j += 2;        //j为汉字字符，一个汉字占用两个字节
   1600                  }
   1601                  else              //显示空白字符            
   1602                  {
   1603                      LED_SetPos(ucIdxX,ucIdxY);
   1604                      for(i = 0;i < 24;i++)
   1605                      {
   1606                          LED_WrDat(0);
   1607                      }
   1608                      
   1609                      LED_SetPos(ucIdxX,ucIdxY + 1);
   1610                      for(i = 0;i < 24;i++)
   1611                      {           
   1612                          LED_WrDat(0);   
   1613                      }
   1614                      
   1615                      LED_SetPos(ucIdxX,ucIdxY + 2);
   1616                      for(i = 0;i < 24;i++)
   1617                      {           
   1618                          LED_WrDat(0);   
   1619                      }
   1620                      
   1621                      j++;
   1622                  }
   1623                  
   1624                  ucIdxX += 24;
   1625              }
   1626          
   1627              return;
   1628          }
   1629          
   1630          /*****************************************************************************
   1631           函 数 名  : LED_PXx16MixStr
   1632           功能描述  : 输出14x16汉字和字符混合字符串 （字符串表格中需含有此字）
   1633           输入参数  : uchar ucIdxX       为显示的横坐标0~114
   1634                       uchar ucIdxY       为页范围0～3
   1635                       uchar ucDataStr[]  要显示的中文字符串
   1636           输出参数  : NONE
   1637           返 回 值  : NONE
   1638          *****************************************************************************/
   1639          /*
   1640          void LED_PXx16MixStr(uchar ucIdxX, uchar ucIdxY, uchar ucDataStr[])
   1641          {
   1642              uchar ucTmpStr[3];
   1643              uchar i = 0;    
   1644              
   1645              while(ucDataStr[i] != '\0')
   1646              {
   1647                  if(ucDataStr[i] > 127)
   1648                  {
   1649                      ucTmpStr[0] = ucDataStr[i];
   1650                      ucTmpStr[1] = ucDataStr[i + 1];
   1651                      ucTmpStr[2] = '\0';          //汉字为两个字节
   1652                      LED_P16x16Str(ucIdxX, ucIdxY, ucTmpStr);  //显示汉字
   1653                      ucIdxX += 16;
   1654                      i += 2;
   1655                  }
   1656                  else
   1657                  {
   1658                      ucTmpStr[0] = ucDataStr[i];    
   1659                      ucTmpStr[1] = '\0';          //字母占一个字节
   1660                      LED_P8x16Str(ucIdxX, ucIdxY,ucDataStr,1,0);  //显示字母
   1661                      ucIdxX += 8;
   1662                      i += 1;
   1663                  }
   1664              }
   1665          
   1666              return;
   1667          } 
   1668          */
   1669          /*****************************************************************************
   1670           函 数 名  : LED_PrintChar
   1671           功能描述  : 将一个Char型数转换成3位数进行显示
   1672           输入参数  : uchar ucIdxX    ucIdxX的范围为0～122
   1673                       uchar ucIdxY    ucIdxY的范围为0～7
   1674                       CHAR8 cData      cData为需要转化显示的数值 -128~127
   1675           输出参数  : none
   1676           返 回 值  : none
   1677          *****************************************************************************/
   1678          /*
   1679          void LED_PrintChar(uchar ucIdxX, uchar ucIdxY, char cData)
   1680          {
   1681              uint i, j, k, usData;
   1682          
   1683          
   1684              LED_P6x8Char(ucIdxX, ucIdxY, '+');
   1685              usData = (uint)cData;
   1686              
   1687              i = usData / 100;
   1688              j = (usData % 100) / 10;
   1689              k = usData % 10;
   1690              
   1691              LED_P6x8Char(ucIdxX+6, ucIdxY, i+48);
   1692              LED_P6x8Char(ucIdxX+12, ucIdxY, j+48);
   1693              LED_P6x8Char(ucIdxX+18, ucIdxY, k+48);   
   1694          
   1695              return;
   1696          }
   1697          
   1698          void LED_PrintUchar(uchar ucIdxX, uchar ucIdxY, uchar cData)
   1699          {
   1700              uint i, j, k;
   1701          
   1702              i = cData / 100;
   1703              j = (cData % 100) / 10;
   1704              k = cData % 10;
   1705              
   1706              if(i) LED_P6x8Char(ucIdxX+6, ucIdxY, i+48);
   1707              LED_P6x8Char(ucIdxX+12, ucIdxY, j+48);
   1708              LED_P6x8Char(ucIdxX+18, ucIdxY, k+48);   
   1709          
   1710              return;
   1711          }
   1712          
   1713          void LED_PrintUint(uchar ucIdxX, uchar ucIdxY, uint cData)
   1714          {
   1715              uchar i,j,k,l,m;
   1716              i = cData/10000;
   1717              j = cData%10000/1000;
   1718              k = cData%1000/100;
   1719              l = cData%100/10;
   1720          		m = cData%10;
   1721              LED_P6x8Char(ucIdxX+6, ucIdxY, i+48);
   1722              LED_P6x8Char(ucIdxX+12, ucIdxY, j+48);
   1723              LED_P6x8Char(ucIdxX+18, ucIdxY, k+48);   
   1724              LED_P6x8Char(ucIdxX+24, ucIdxY, l+48);
   1725          		LED_P6x8Char(ucIdxX+30, ucIdxY, m+48);
   1726              return;
   1727          }
   1728          */
   1729          /*****************************************************************************
   1730           函 数 名  : LED_PrintShort
   1731           功能描述  : 将一个Short型数转换成5位数进行显示
   1732           输入参数  : uchar ucIdxX ucIdxX的范围为0～120
   1733                       uchar ucIdxY ucIdxY为页的范围0～7
   1734                       SHORT16 sData  sData为需要转化显示的数值
   1735           输出参数  : none
   1736           返 回 值  : none
   1737          *****************************************************************************/
   1738          /*
   1739          void LED_PrintShort(uchar ucIdxX, uchar ucIdxY, int sData)
   1740          {
   1741              uint i, j, k, l, m, usData;  
   1742              if(sData < 0)
   1743              {
   1744                  LED_P6x8Char(ucIdxX,ucIdxY,'-');
   1745                  usData = (uint)(-sData);  
   1746              }
   1747              else
   1748              {
   1749                  LED_P6x8Char(ucIdxX,ucIdxY,'+');
   1750                  usData = (uint)sData;
   1751              }
   1752              
   1753              l = usData / 10000;
   1754              m = (usData % 10000) /1000;
   1755              i = (usData % 1000) / 100;
   1756              j = (usData % 100) / 10;
   1757              k = usData % 10;
   1758              LED_P6x8Char(ucIdxX+6, ucIdxY, l+48);
   1759              LED_P6x8Char(ucIdxX+12, ucIdxY, m+48);
   1760              LED_P6x8Char(ucIdxX+18, ucIdxY, i+48);
   1761              LED_P6x8Char(ucIdxX+24, ucIdxY, j+48);
   1762              LED_P6x8Char(ucIdxX+30, ucIdxY, k+48);  
   1763          
   1764              return;
   1765          }
   1766          */
   1767          /*****************************************************************************
   1768           函 数 名  : LED_PrintImage
   1769           功能描述  : 将图像显示出来
   1770           输入参数  : uchar *pucTable     二维图像数组的地址
   1771                       uint usRowNum    二维图像的行数1~64
   1772                       uint usColumnNum 二维图像的列数1~128
   1773           输出参数  : none
   1774           返 回 值  : none
   1775          *****************************************************************************/
   1776          /*
   1777          void LED_PrintImage(uchar *pucTable, uint usRowNum, uint usColumnNum)
   1778          {
   1779              uchar ucData;
   1780              uint i,j,k,m,n;
   1781              uint usRowTmp;
   1782          
   1783              m = usRowNum >> 3;   //计算图片行数以8位为一组完整的组数
   1784              n = usRowNum % 8;    //计算分完组后剩下的行数
   1785              
   1786              for(i = 0; i < m; i++) //完整组行扫描
   1787              {
   1788                  LED_SetPos(0,(uchar)i);
   1789                  usRowTmp = i << 3;    //计算当前所在行的下标                  
   1790                  for(j = 0; j < usColumnNum; j++) //列扫描        
   1791                  {
   1792                      ucData = 0;
   1793                      for(k = 0; k < 8; k++) //在i组中对这8行扫描
   1794                      {
   1795                          ucData>>=1;
   1796                          if((pucTable + (usRowTmp + k) * usColumnNum)[j] == LED_IMAGE_WHITE)
   1797                          {
   1798                              ucData|=0x80;
   1799                          }
   1800                          
   1801                      }
   1802                      LED_WrDat(ucData);
   1803                  }
   1804              }
   1805              
   1806              LED_SetPos(0,(uchar)i); //设置剩下的行显示的起始坐标
   1807              usRowTmp = i << 3;       //计算当前所在行的下标                  
   1808              for(j = 0; j < usColumnNum; j++) //列扫描        
   1809              {
   1810                  ucData = 0;
   1811                  for(k = 0; k < n; k++) //对剩下的行扫描
   1812                  {
   1813                      ucData>>=1;
   1814                      if((pucTable + (usRowTmp + k) * usColumnNum)[j] == LED_IMAGE_WHITE)
   1815                      {
   1816                          ucData|=0x80;
   1817                      }
   1818                      
   1819                  }
   1820                  ucData>>=(8-n);
   1821                  LED_WrDat(ucData);
   1822              }
   1823          
   1824              return;
   1825          }
   1826          */
   1827          
   1828          /*****************************************************************************
   1829           函 数 名  : LED_PrintImage
   1830           功能描述  : 将图像显示出来
   1831           输入参数  : uchar *pucTable     二维图像数组的地址
   1832                       uint usRowNum    二维图像的行数1~64
   1833                       uint usColumnNum 二维图像的列数1~128
   1834           输出参数  : none
   1835           返 回 值  : none
   1836           备    注  :字符的像素大小例如16*16
   1837                      改变LED_WrCmd(0x12)可改变字符显示的X坐标
   1838                      改变Page值可改变字符的纵坐标
   1839                      ucColumn为字符的X坐标扫描的像素
   1840                      LED_WrCmd(0xb0 + Page)为显示的纵坐标的位置，只能显示高度为8的字符
   1841                      不能显示高度为16的字符
   1842          *****************************************************************************/
   1843          /*
   1844          void Image(uchar Page,uchar p[])
   1845          {
   1846              uchar ucPage,ucColumn;
   1847          		uint x=0;
   1848              for(ucPage = 0; ucPage < 1; ucPage++)
   1849              {
   1850                  LED_WrCmd(0xb0 + Page);  //0xb0+0~7表示页0~7
   1851                  LED_WrCmd(0x00);           //0x00+0~16表示将128列分成16组其地址在某组中的第几列
   1852                  LED_WrCmd(0x17); //改变X坐标          //0x10+0~16表示将128列分成16组其地址所在第几组
   1853                  
   1854                  for(ucColumn = 0; ucColumn < 16; ucColumn++)
   1855                  {
   1856                      LED_WrDat(p[x++]);
   1857                  }
   1858                  
   1859                  
   1860              }
   1861          } 
   1862          */
   1863          
   1864          /*****************************************************************************
   1865           函 数 名  : LED_PrintImage
   1866           功能描述  : 将图像显示出来
   1867           输入参数  : uchar *pucTable     二维图像数组的地址
   1868                       uint usRowNum    二维图像的行数1~64
   1869                       uint usColumnNum 二维图像的列数1~128
   1870           输出参数  : none
   1871           返 回 值  : none
   1872           备    注  :字符的像素大小例如16*16
   1873                      改变LED_WrCmd(0x12)可改变字符显示的X坐标
   1874                      改变Page值可改变字符的纵坐标
   1875                      ucColumn为字符的X坐标扫描的像素
   1876                      LED_WrCmd(0xb0 + Page)为显示的纵坐标的位置，只能显示高度为8的字符
   1877                      不能显示高度为16的字符
   1878          *****************************************************************************/
   1879          /*
   1880          void Image_LOGO(uchar X,uchar Y,uchar p[])
   1881          {
   1882              uchar ucPage,ucColumn;
   1883          		uint x=0;
   1884              for(ucPage = 0; ucPage < 1; ucPage++)
   1885              {
   1886                  LED_WrCmd(0xb0 + Y);  //0xb0+0~7表示页0~7
   1887                  LED_WrCmd(0x00);           //0x00+0~16表示将128列分成16组其地址在某组中的第几列
   1888                  LED_WrCmd(0x10 + X); //改变X坐标          //0x10+0~16表示将128列分成16组其地址所在第几组
   1889                  
   1890                  for(ucColumn = 0; ucColumn < 16; ucColumn++)
   1891                  {
   1892                      LED_WrDat(p[x++]);
   1893                  }
   1894                  
   1895                  
   1896              }
   1897          } 
   1898          */

   Section sizes:

     Function/Label     Bytes
     --------------     -----
     _A_PC_ODR             1
     _A_PD_ODR             1
     _A_PD_DDR             1
     _A_PD_CR1             1
     _A_PD_CR2             1
     _A_PE_ODR             1
     _A_PF_ODR             1
     _A_PF_DDR             1
     _A_PF_CR1             1
     _A_PF_CR2             1
     OLEDIO_Init          65
     Close_OLED_IO        17
     F6x8                160
     F16x16_Idx          229
     F24x24_Idx           17
     F16x16             3648
     F8X16              1520
     F16X32                1
     F24x24                1
     LED_WrDat            61
     LED_WrCmd            61
     LED_SetPos           29
     LED_Fill             60
     LED_Fill_Area        64
     BMP                  68
     SetStartColumn       29
     SetAddressingMode    14
     SetColumnAddress     23
     SetPageAddress       23
     SetStartLine          6
     SetContrastControl   14
     SetChargePump        16
     SetSegmentRemap       6
     SetEntireDisplay      6
     SetInverseDisplay     6
     SetMultiplexRatio    14
     SetDisplayOnOff       6
     SetStartPage          6
     SetCommonRemap        6
     SetDisplayOffset     14
     SetDisplayClock      14
     SetPrechargePeriod   14
     SetCommonConfig      16
     SetVCOMH             14
     SetNop                6
     OLED_Init           124
     NegDis                1
     LED_P6x8Char          1
     LED_P6x8Str         110
     LED_P8x16Char       149
     LED_P16x32Char      260
     LED_P8x16Str        275
     LED_P16x16Str       307
     LED_P24x24Str       380

 
 2 284 bytes in section .far_func.text
     1 byte  in section .near.bss
    10 bytes in section .near.noinit
 5 576 bytes in section .near.rodata
 
 2 284 bytes of CODE  memory
 5 576 bytes of CONST memory
     1 byte  of DATA  memory (+ 10 bytes shared)

Errors: none
Warnings: none
