###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             28/Oct/2019  21:00:24 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  F:\单片机例程\1.程序\IAP\IAP---已测试【2019.7.15】\STM8L #
#                    152R8T6\STM8L152R8T6_IAP_APP\AT24C02.c                   #
#    Command line =  F:\单片机例程\1.程序\IAP\IAP---已测试【2019.7.15】\STM8L #
#                    152R8T6\STM8L152R8T6_IAP_APP\AT24C02.c -e -Ol --no_cse   #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_cross_call --debug --code_model medium              #
#                    --data_model medium -o F:\单片机例程\1.程序\IAP\IAP---已 #
#                    测试【2019.7.15】\STM8L152R8T6\STM8L152R8T6_IAP_APP\Debu #
#                    g\Obj\ --dlib_config "D:\Program Files (x86)\IAR         #
#                    Systems\Embedded Workbench 6.0\stm8\LIB\dlstm8mmn.h"     #
#                    -lcN F:\单片机例程\1.程序\IAP\IAP---已测试【2019.7.15】\ #
#                    STM8L152R8T6\STM8L152R8T6_IAP_APP\Debug\List\ -I         #
#                    F:\单片机例程\1.程序\IAP\IAP---已测试【2019.7.15】\STM8L #
#                    152R8T6\STM8L152R8T6_IAP_APP\ -I                         #
#                    F:\单片机例程\1.程序\IAP\IAP---已测试【2019.7.15】\STM8L #
#                    152R8T6\STM8L152R8T6_IAP_APP\SDCARD\ -I                  #
#                    F:\单片机例程\1.程序\IAP\IAP---已测试【2019.7.15】\STM8L #
#                    152R8T6\STM8L152R8T6_IAP_APP\src\ --vregs 16             #
#    List file    =  F:\单片机例程\1.程序\IAP\IAP---已测试【2019.7.15】\STM8L #
#                    152R8T6\STM8L152R8T6_IAP_APP\Debug\List\AT24C02.lst      #
#    Object file  =  F:\单片机例程\1.程序\IAP\IAP---已测试【2019.7.15】\STM8L #
#                    152R8T6\STM8L152R8T6_IAP_APP\Debug\Obj\AT24C02.o         #
#                                                                             #
#                                                                             #
###############################################################################

F:\单片机例程\1.程序\IAP\IAP---已测试【2019.7.15】\STM8L152R8T6\STM8L152R8T6_IAP_APP\AT24C02.c
      1          #include<iostm8l152R8.h>
      2          #include <stdint.h>
      3          #include <stdio.h>
      4          #include "AT24C02.h"
      5          #include "OLED.h"
      6          
      7          /*******************************************************************************
      8          **函数名称：void delay(unsigned int ms)     Name: void delay(unsigned int ms)
      9          **功能描述：大概延时
     10          **入口参数：unsigned int ms   输入大概延时数值
     11          **输出：无
     12          *******************************************************************************/
     13          void Delayms(unsigned int ms)
     14          {
     15            unsigned int x , y;
     16            for(x = ms; x > 0; x--)           /*  通过一定周期循环进行延时*/
     17              for(y = 3000 ; y > 0 ; y--);
     18          }
     19          /*******************************************************************************
     20          **函数名称:void IIC_Init() 
     21          **功能描述:初始化IIC1接口
     22          **入口参数:
     23          **输出:无
     24          *******************************************************************************/
     25          void IIC2402_Init()
     26          {	
     27              CLK_PCKENR1_bit.PCKEN13 = 1;    //使能I2C1时钟		 
     28             
     29              I2C1_CR2_bit.SWRST = 1;             //I2C1->CR1 |= 1 << 15; 		//复位I2C1寄存器
     30              asm("nop");
     31              asm("nop");
     32              asm("nop");
     33              asm("nop");
     34              I2C1_CR2_bit.SWRST = 0;            	//清除复位设置
     35              
     36              //I2C1->CR2 &= ~I2C_CR2_FREQ;												//
     37              I2C1_FREQR_bit.FREQ = 16;      	//Freq = 36M
     38          
     39              I2C1_CCRH_bit.F_S = 1;   		//用于快速模式
     40              I2C1_CCRH_bit.DUTY = 0;
     41              I2C1_CCRL = 40;           		//设置I2C1的时钟频率为200KHZ  I2CFreq = PCLK1 / CCR / DUTY[位]		=   16MHZ / 40 / 2 = 200KHZ
     42              
     43              I2C1_TRISER_bit.TRISE = 16 + 1;								
     44              
     45             // I2C1->CR1 &= ~I2C_CR1_SMBUS; 	//设置为I2C模式
     46              I2C1_CR1_bit.ENGC = 1;		//设置为广播呼叫模式
     47              I2C1_CR1_bit.PE = 1;		        //打开I2C(使能I2C)
     48          	
     49          }
     50          
     51          
     52          /*******************************************************************************
     53          **函数名称:void IIC_Write(unsigned char subaddr , unsigned char Byte_addr , unsigned char *buffer , unsigned short num)
     54          **功能描述:向IIC器件写数据
     55          **入口参数:
     56                    subaddr :  从器件地址
     57                    Byte_addr : 确定器件写地址的起始地址
     58                    *buffer   : 写数据的起址地址
     59                    num				: 要写数据的个数
     60          **输出:无
     61          *******************************************************************************/
     62          void IIC_Write(unsigned char subaddr , unsigned char Byte_addr , unsigned char *buffer , unsigned short num)
     63          {
     64              unsigned char i2csr1;
     65              
     66              
     67              //while(I2C1->SR2 & I2C_SR2_BUSY);          //判断I2C模块是否忙
     68              
     69              //发送起始信号
     70              I2C1_CR2_bit.START = 1;    
     71              while(I2C1_SR1_bit.SB == 0);	//等待起始信号产生
     72              i2csr1 = I2C1_SR1; //SR1.AF
     73              I2C1_DR = (subaddr);		//发送器件地地址，并清除SB标志位
     74              while(I2C1_SR1_bit.ADDR == 0);	//等待器件地址发送完成
     75              i2csr1 = I2C1_SR1;
     76              i2csr1 = I2C1_SR3;		//读状态寄存器1和状态寄存器3清除发送器件地址标志位
     77              
     78          
     79              I2C1_DR = Byte_addr;             //发送器件存储首地址
     80          
     81              while(I2C1_SR1_bit.BTF == 0);  //等待移位发送器发送完成
     82              i2csr1 = I2C1_SR1;	      //清除BIT标志位
     83          
     84              while(num > 0)
     85              {
     86                  I2C1_DR = *buffer;		//发送器件存储首地址
     87          
     88                  while(I2C1_SR1_bit.BTF == 0);//等待移位发送器发送完成
     89                  i2csr1 = I2C1_SR1;		//清除BIT标志位
     90                  buffer++;
     91                  num--;
     92              }
     93              I2C1_CR2_bit.STOP = 1;   	//发送停止信号结束数据传输
     94          }
     95          
     96          
     97          /*******************************************************************************
     98          **函数名称:void IIC_Read(unsigned char subaddr , unsigned char Byte_addr , unsigned char *buffer , unsigned short num)
     99          **功能描述:向IIC器件读数据
    100          **入口参数:
    101                    subaddr :  从器件地址
    102                    Byte_addr : 确定器件写地址的起始地址
    103                    *buffer   : 读数据的缓冲区起始地址
    104                    num				: 要读数据的个数
    105          **输出:无
    106          *******************************************************************************/
    107          void IIC_Read(unsigned char subaddr , unsigned char Byte_addr , unsigned char *buffer , unsigned short num)
    108          {
    109            unsigned char i2csr1;
    110            
    111            
    112           
    113            
    114            I2C1_CR2_bit.ACK = 1;	        //产生应答信号
    115            
    116            I2C1_CR2_bit.START = 1;	//发送起始信号
    117            while(I2C1_SR1_bit.SB == 0);	//等待起始信号产生
    118            
    119            i2csr1 = I2C1_SR1;		//SR1.AF??
    120            I2C1_DR = subaddr;		//发送器件地地址，并清除SB标志位
    121            while(I2C1_SR1_bit.ADDR == 0);	//等待器件地址发送完成
    122            
    123            i2csr1 = I2C1_SR1;
    124            i2csr1 = I2C1_SR3;		//读状态寄存器1和状态寄存器3清除发送器件地址标志位
    125          
    126            I2C1_DR = Byte_addr;
    127            while(I2C1_SR1_bit.BTF == 0);//等待移位发送器发送完成
    128            i2csr1 = I2C1_SR1;	//清除BIT标志位
    129            
    130            //重新发送起始信号
    131            I2C1_CR2_bit.START = 1;//I2C1->CR1 |= I2C_CR1_START;
    132            while(I2C1_SR1_bit.SB == 0);//等待起始信号产生
    133          
    134            i2csr1 = I2C1_SR1;//SR1.AF??
    135            I2C1_DR = (char)(subaddr | 0x01);	//发送器件地地址，并清除SB标志位
    136            while(I2C1_SR1_bit.ADDR == 0);         //等待器件地址发送完成
    137            i2csr1 = I2C1_SR1;
    138            i2csr1 = I2C1_SR3;			//读状态寄存器1和状态寄存器2清除发送器件地址标志位
    139          
    140            while(num)
    141            {
    142              if(num == 1)
    143              {
    144                  I2C1_CR2_bit.ACK = 0;          //最后一个字节不产生应答信号
    145                  I2C1_CR2_bit.STOP = 1;         //发送停止信号结束数据传输
    146              }
    147          
    148              while(I2C1_SR1_bit.RXNE == 0);
    149              i2csr1 = I2C1_SR1;
    150          
    151              *buffer = I2C1_DR;	
    152              buffer++;
    153              num--;
    154            }
    155          }
    156          
    157          
    158          /*******************************************************************************
    159          **函数名称:void I2C_Test(void)
    160          **功能描述:向AT24C02里写满128个字节数据，再读出来，验证通过IIC接口写数据与读数据的正确性
    161          **入口参数:
    162          						无
    163          **输出:无
    164          *******************************************************************************/
    165          void I2C_AT24C02_Test(void)
    166          {
    167              unsigned int i;
    168              unsigned char I2c_Buf[128];
    169                    
    170            
    171              //printf("向AT24C02EEPROM写入的数据为：\n\r");
    172              for(i = 0; i < 128; i++)
    173              {   
    174                I2c_Buf[i] = i ;
    175                //printf("0x%x\t" , I2c_Buf[i]);
    176                if(i%16 == 15)
    177                {
    178                  //printf("\n\r");
    179                }
    180              }
    181              
    182              //printf("\n\r");
    183              //AT24C02 每次最多只能写入8个字节的数据，所以要分段写
    184              IIC_Write(0xa0 , 0 , I2c_Buf , 8);
    185              Delayms(5);
    186              IIC_Write(0xa0 , 8 ,  &I2c_Buf[8] , 8);
    187              Delayms(5);
    188              IIC_Write(0xa0 , 16 , &I2c_Buf[16] , 8);
    189              Delayms(5);
    190              IIC_Write(0xa0 , 24 , &I2c_Buf[24] , 8);
    191              Delayms(5);
    192              IIC_Write(0xa0 , 32 , &I2c_Buf[32] , 8);
    193              Delayms(5);
    194              IIC_Write(0xa0 , 40 , &I2c_Buf[40] , 8);
    195              Delayms(5);
    196              IIC_Write(0xa0 , 48 , &I2c_Buf[48] , 8);
    197              Delayms(5);
    198              IIC_Write(0xa0 , 56 , &I2c_Buf[56] , 8);
    199              Delayms(5);
    200              IIC_Write(0xa0 , 64 , &I2c_Buf[64] , 8);
    201              Delayms(5);
    202              IIC_Write(0xa0 , 72 , &I2c_Buf[72] , 8);
    203              Delayms(5);
    204              IIC_Write(0xa0 , 80 , &I2c_Buf[80] , 8);
    205              Delayms(5);
    206              IIC_Write(0xa0 , 88 , &I2c_Buf[88] , 8);
    207              Delayms(5);
    208              IIC_Write(0xa0 , 96 , &I2c_Buf[96] , 8);
    209              Delayms(5);
    210              IIC_Write(0xa0 , 104 , &I2c_Buf[104] , 8);
    211              Delayms(5);
    212              IIC_Write(0xa0 , 112 , &I2c_Buf[112] , 8);
    213              Delayms(5);
    214              IIC_Write(0xa0 , 120 , &I2c_Buf[120] , 8);
    215              
    216            
    217              for(i = 0 ; i < 128 ;i++)		//清空缓存数据
    218              {   
    219                I2c_Buf[i] = 0;
    220              }
    221              
    222              //printf("从AT24C02IIRPOM读出的数据为：\n\r");  //从AT24C02里读出数据
    223              IIC_Read(0xa0 , 0 , I2c_Buf , 128);
    224            
    225              
    226              
    227              for(i = 0 ; i < 128 ; i++)
    228              {	
    229                  if(I2c_Buf[i] != i)				//把读出的数据与写入的数据进行比较，看是否正确
    230                  {
    231                      //printf("错误：I2C EEPROMAT24C02写入与读出的数据不一致\n\r");
    232                      //while(1);			//EEPROM AT24C02读写失败，停止等待
    233                  }
    234                  //printf("0x%X\t", I2c_Buf[i]);
    235                  if(i%16 == 15)
    236                  {
    237                      //printf("\n\r");
    238                  }
    239              }
    240              //printf("\r\n\r\nEEPROM AT24C02读写一致，成功！！！\n\r");
    241          }

   Section sizes:

     Function/Label   Bytes
     --------------   -----
     _A_CLK_PCKENR1      1
     _A_I2C1_CR1         1
     _A_I2C1_CR2         1
     _A_I2C1_FREQR       1
     I2C1_DR             1
     _A_I2C1_SR1         1
     _A_I2C1_SR3         1
     _A_I2C1_CCRL        1
     _A_I2C1_CCRH        1
     _A_I2C1_TRISER      1
     Delayms            19
     IIC2402_Init       57
     IIC_Write          96
     IIC_Read          153
     I2C_AT24C02_Test  487

 
 812 bytes in section .far_func.text
  10 bytes in section .near.noinit
 
 812 bytes of CODE memory
   0 bytes of DATA memory (+ 10 bytes shared)

Errors: none
Warnings: 2
